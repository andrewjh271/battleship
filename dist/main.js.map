{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;AC9CtB;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;AC1CtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kCAAkC,qBAAqB,KAAK;AAC5D;;AAEA;AACA;AACA,uBAAuB,WAAW;AAClC,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;;AC7BvB;AAC0D;AAC4B;AAC5C;AACS;;AAE5C;AACP,gBAAgB,uEAAkB;;AAElC;AACA;AACA;AACA;AACA,IAAI,8CAAG;AACP;;AAEA;AACA;AACA;AACA;AACA,IAAI,6CAAE;AACN;;AAEA;AACA;AACA;AACA,IAAI,+CAAI;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,IAAI,6DAAa;AACjB;;AAEA;AACA;AACA;AACA,oBAAoB,gEAAgB;AACpC,2BAA2B,kEAAkB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB;AAC/D;AACA,+BAA+B,UAAU,SAAS,QAAQ;AAC1D,kCAAkC,UAAU,SAAS,QAAQ;AAC7D;;AAEA;AACA;AACA,kBAAkB,gEAAkB;AACpC,KAAK;AACL;;AAEA,WAAW;AACX;;;;;;;;;;;;;;;;;;;;AC1E2C;AACF;;AAEzC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE,wDAAY;AACd,+CAA+C,UAAU;AACzD,4CAA4C,UAAU;AACtD,+CAA+C,UAAU;AACzD,4CAA4C,UAAU;AACtD;;AAEA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEyD;;;;;;;;;;;;;;;AC/DzD;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;;;;;;;;;ACrBqB;AACb;AACqB;AACK;AACvB;AACG;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,sDAAW;AAChD;AACA,EAAE,yDAAS;AACX,iDAAiD,+CAAI,iCAAiC,YAAY;AAClG;;AAEA;AACA,gBAAgB,4CAAc;AAC9B;AACA,sCAAsC,iDAAS;AAC/C;AACA;AACA;AACA;AACA,EAAE,0DAAc,SAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;;AAEA,6CAAE;AACF,6CAAE;;AAEF;AACA,UAAU,6BAA6B;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,6DAAiB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,6DAAiB;AACnB,kCAAkC,qDAAqD;AACvF;AACA,GAAG;AACH,qCAAqC,2CAA2C;AAChF;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,4CAAc;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAE+D;;;;;;;;;;;;;;;;;;;;;AC9I9B;AACU;AACA;AACA;AACN;AACG;;AAEzB;AACf;AACA;AACA;AACA;AACA,kBAAkB,IAAI,qDAAS,IAAI;AACnC;AACA,oBAAoB,IAAI,qDAAS,IAAI;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,6CAAE;AACN;;AAEA;AACA,kBAAkB,wDAAW;AAC7B;AACA;AACA,KAAK;AACL,IAAI,8CAAG;AACP;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;;AAEA,oFAAoF,qDAAS;;AAE7F;AACA;AACA;;AAEA,oBAAoB,iDAAW;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB;AACA,WAAW,wDAAU;AACrB;;AAEA;AACA;AACA,oBAAoB,oBAAoB;AACxC,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;AC3GA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEkC;;;;;;;;;;;;;;;;ACVlC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEkD;;;;;;;;;;;;;;;;;ACVlD;AACkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,+CAAI;AACV,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,+CAAI;AACN;;AAEA;AACA;AACA;AACA;;AAEwC;;;;;;;;;;;;;;;;AC3CxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEoC;;;;;;;;;;;;;;;;;;;ACpBD;AACkC;AACxB;AACwB;AAC7B;AACN;AACO;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY;AACZ,YAAY;;AAEZ;AACA;AACA,EAAE,6DAAa;AACf,EAAE,sDAAW;AACb,WAAW,kDAAY;AACvB,WAAW,kDAAY;AACvB,oBAAoB,0DAAe,WAAW,qDAAS;AACvD,oBAAoB,0DAAe,WAAW,qDAAS;AACvD,YAAY,2DAAkB;AAC9B,YAAY,8DAAqB;;AAEjC;AACA,0DAA0D,YAAY;AACtE;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ,0DAA0D,YAAY;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAU;AACZ,EAAE,uDAAO;;AAET,EAAE,+CAAI,qBAAqB;AAC3B;;;;;;;;;;;;;;;;;;;;;;;;ACrDwC;;AAExC;AACA;AACA,iCAAiC,qDAAS,IAAI;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,KAAK;AAC/B,yBAAyB,oBAAoB;AAC7C,0BAA0B,qBAAqB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEqF;;;;;;;;;;;;;;;;;ACxDrF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEyB;;;;;;;;;;;;;;;;;;ACxBe;AACC;;AAEzC,cAAc,sDAAW;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA,eAAe,qDAAS;AACxB;AACA,kBAAkB,UAAU;AAC5B,oBAAoB,UAAU;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,WAAW;AACX;;AAEqD;;;;;;;;;;;;;;;;;ACnErD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sBAAsB,WAAW,SAAS;AACzF;AACA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA,+CAA+C,qBAAqB,WAAW,SAAS;AACxF;AACA;AACA;AACA;AACA;;AAEqD;;;;;;;;;;;;;;;AClCtC;AACf;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,WAAW;AACX;;;;;;;UCZA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNoB","sources":["webpack://battleship/./src/1DSetFinder.js","webpack://battleship/./src/2DSetFinder.js","webpack://battleship/./src/DOMAdapter.js","webpack://battleship/./src/DOMBoard.js","webpack://battleship/./src/DOMController.js","webpack://battleship/./src/DOMInitializeBoard.js","webpack://battleship/./src/DOMSetupBoard.js","webpack://battleship/./src/board.js","webpack://battleship/./src/boardSize.js","webpack://battleship/./src/coordinates.js","webpack://battleship/./src/draggable.js","webpack://battleship/./src/ensemble.js","webpack://battleship/./src/gameflow.js","webpack://battleship/./src/imageGenerator.js","webpack://battleship/./src/observer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/rotatable.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["function find1DSets(board, length) {\n  if (length === 1) return board.emptySquares();\n  let sets = [];\n  for (let i = 0; i < board.size; i++) {\n    const horizontal = [];\n    const vertical = [];\n    for (let j = 0; j < board.size; j++) {\n      horizontal.push([j, i]);\n      vertical.push([i, j]);\n    }\n    sets = [\n      ...sets,\n      ...findSetsFromRow(horizontal, length, board),\n      ...findSetsFromRow(vertical, length, board),\n    ];\n  }\n  return sets;\n}\n\nfunction findSetsFromRow(row, length, board) {\n  let lft = 0;\n  let rt = 1;\n  const sets = [];\n\n  while (rt < row.length) {\n    if (board.isOccupied([row[lft][0], row[lft][1]])) {\n      lft = rt;\n      rt += 1;\n    } else if (board.isOccupied([row[rt][0], row[rt][1]])) {\n      lft = rt + 1;\n      rt += 2;\n    } else if (rt - lft + 1 === length) {\n      const set = [];\n      for (let j = lft; j <= rt; j++) {\n        set.push(row[j]);\n      }\n      sets.push(set);\n      lft++;\n      rt++;\n    } else {\n      rt++;\n    }\n  }\n  return sets;\n}\n\nexport { find1DSets };\n","function find2DSets(board, width, height) {\n  let sets = [];\n  for (let i = 0; i <= board.size - width; i++) {\n    const horizontal = [];\n    const vertical = [];\n    for (let j = 0; j < board.size; j++) {\n      horizontal.push(createXComponent(j, i, width));\n      if (width !== height) vertical.push(createYComponent(j, i, width));\n    }\n    const rotated = width === height ? [] : findSetsFrom2DRow(vertical, height, board);\n    sets = [...sets, ...findSetsFrom2DRow(horizontal, height, board), ...rotated];\n  }\n  return sets;\n}\n\nfunction createXComponent(fixed, variable, length) {\n  const component = [];\n  for (let idx = 0; idx < length; idx++) {\n    component.push([fixed, variable + idx]);\n  }\n  return component;\n}\n\nfunction createYComponent(fixed, variable, length) {\n  const component = [];\n  for (let idx = 0; idx < length; idx++) {\n    component.push([variable + idx, fixed]);\n  }\n  return component;\n}\n\nfunction findSetsFrom2DRow(row, length, board) {\n  const sets = [];\n  for (let i = 0; i <= row.length - length; i++) {\n    const candidateSet = row.slice(i, i + length).flat();\n    if (!board.isOccupied(candidateSet)) {\n      sets.push(candidateSet);\n    }\n  }\n  return sets;\n}\n\nexport { find2DSets };\n","function getShipData(DOMboard) {\n  return Array.from(DOMboard.children)\n    .filter((element) => element.classList.contains('placed-img-wrapper'))\n    .map((element) => {\n      const [rowStart, colStart, rowSpan, colSpan] = element.style.gridArea\n        .match(/\\d+/g)\n        .map(Number);\n      const yStart = rowStart - 1;\n      const yEnd = yStart + rowSpan - 1;\n      const xStart = colStart - 1;\n      const xEnd = xStart + colSpan - 1;\n      const name = element.firstChild.type;\n      const object = {};\n      object[name] = getCoordinates(xStart, xEnd, yStart, yEnd);\n      return object;\n    })\n    .reduce((object, entry) => ({ ...object, ...entry }), {});\n}\n\nfunction getCoordinates(xStart, xEnd, yStart, yEnd) {\n  const set = [];\n  for (let x = xStart; x <= xEnd; x++) {\n    for (let y = yStart; y <= yEnd; y++) {\n      set.push([x, y]);\n    }\n  }\n  return set;\n}\n\nexport { getShipData };\n","/* eslint-disable no-param-reassign */\nimport { initializeDOMBoard } from './DOMInitializeBoard';\nimport { setupDOMBoard, newTemplateImage, newTemplateWrapper } from './DOMSetupBoard';\nimport { on, off, emit } from './observer'\nimport { coordinatesToIndex } from './coordinates';\n\nexport function DOMBoardFactory(id, ROWS) {\n  const board = initializeDOMBoard(id, ROWS);\n\n  function setOffense() {\n    board.classList.remove('defense');\n    board.classList.add('offense');\n    board.removeEventListener('click', receiveAttack);\n    off('boardChange', updateBoard);\n  }\n\n  function setDefense() {\n    board.classList.remove('offense');\n    board.classList.add('defense');\n    board.addEventListener('click', receiveAttack);\n    on('boardChange', updateBoard);\n  }\n\n  function receiveAttack() {\n    // get index\n    const index = 22;\n    emit('attack', index);\n  }\n\n  function updateBoard(dataBoard) {\n    dataBoard.squares.forEach(square => {\n      console.log(square);\n      // if square.ship add .occupied\n      // if square.ship.isSunk() add .sunk\n      // if square.attacked add .attacked\n    })\n  }\n\n  function setupBoard() {\n    setupDOMBoard(board);\n  }\n\n  function placeSetImages(dataBoard) {\n    // places on DOMboard(board variable) all images from board object argument\n    dataBoard.placedShips.forEach(ship => {\n      const image = newTemplateImage(ship.name);\n      const imageWrapper = newTemplateWrapper();\n      setPosition(image, imageWrapper, ship.coords);\n      addPlacedClass(ship.coords);\n      imageWrapper.appendChild(image);\n      board.appendChild(imageWrapper);\n    })\n  }\n\n  function setPosition(image, wrapper, set) {\n    const rowStart = set.reduce((min, coord) => coord[1] < min ? coord[1] : min, 100) + 1;\n    const rowSpan = set.reduce((max, coord) => coord[1] > max ? coord [1] : max, -100) + 2 - rowStart;\n    const colStart = set.reduce((min, coord) => coord[0] < min ? coord[0] : min, 100) + 1;\n    const colSpan = set.reduce((max, coord) => coord[0] > max ? coord [0] : max, -100) + 2 - colStart;\n    \n    if (colSpan > rowSpan) {\n      image.style.transform = `translateX(${image.style.height}) rotate(90deg)`;\n    }\n    wrapper.style.gridRow = `${rowStart} / span ${rowSpan}`;\n    wrapper.style.gridColumn = `${colStart} / span ${colSpan}`;\n  }\n\n  function addPlacedClass(set) {\n    set.forEach(coords => {\n      board.cells[coordinatesToIndex(coords)].classList.add('highlight-placed');\n    })\n  }\n\n  return { setOffense, setDefense, setupBoard, placeSetImages }\n}\n","import { setRowLength } from \"./boardSize\";\nimport { getEnsemble } from \"./ensemble\";\n\n// const startButton = document.querySelector('start-game');\n// startButton.addEventListener('click', setupBoard1)\n\nconst board1 = document.querySelector('#board1');\nconst board2 = document.querySelector('#board2');\n\nfunction showSetup(board) {\n  board.classList.remove('hidden');\n  if (board1 === board) {\n    board2.classList.add('hidden');\n  } else {\n    board1.classList.add('hidden');\n  }\n  const previews = document.querySelectorAll('.img-preview');\n  const whiteList = Object.keys(getEnsemble());\n  previews.forEach(preview => {\n    if (!whiteList.includes(preview.id)) {\n      preview.classList.add('hidden');\n    }\n  })\n}\n\nfunction showBoards() {\n  const setupContainer = document.querySelector('.board-setup-container');\n  board1.classList.remove('hidden');\n  board2.classList.remove('hidden');\n  setupContainer.classList.add('hidden');\n}\n\nfunction setTurn(player) {\n  if (player === 'player1') {\n    board1.classList.remove('defense');\n    board2.classList.add('defense');\n  }\n}\n\nfunction setBoardSizes() {\n  // eventually based on window size\n  const rowLength = 10;\n  setRowLength(rowLength);\n  board1.style.gridTemplateColumns = `repeat(${rowLength}, 1fr)`\n  board1.style.gridTemplateRows = `repeat(${rowLength}, 1fr)`\n  board2.style.gridTemplateColumns = `repeat(${rowLength}, 1fr)`\n  board2.style.gridTemplateRows = `repeat(${rowLength}, 1fr)`\n}\n\n// function handleAttack(e) {\n//   const { index } = e.target.dataset;\n//   if (!index) return;\n//   console.log(indexToCoordinates(index));\n// }\n\n// function listenForAttack(board) {\n//   board.addEventListener('click', handleAttack);\n// }\n\n// function unListenForAttack(board) {\n//   board.removeEventListener('click', handleAttack);\n// }\n\nexport { showBoards, setBoardSizes, showSetup, setTurn };\n","/* eslint-disable no-param-reassign */\nfunction createGrid(rows, board) {\n  board.cells = [];\n  for (let i = 0; i < rows * rows; i++) {\n    board.cells[i] = document.createElement('div');\n    board.cells[i].classList.add('cell');\n    board.cells[i].style.gridArea = `${Math.floor(i / rows) + 1} / ${\n      (i % rows) + 1\n    } / span 1 / span 1`;\n    board.cells[i].dataset.index = i;\n    board.appendChild(board.cells[i]);\n  }\n}\n\nfunction initializeDOMBoard(id, rows) {\n  const board = document.getElementById(id);\n  board.numRows = rows;\n  createGrid(rows, board);\n  return board;\n}\n\nexport { initializeDOMBoard };\n","import * as imageGenerator from './imageGenerator';\nimport { on, emit } from './observer';\nimport { dragStart, resetDraggedImage } from './draggable';\nimport { setStagedImage, adjustForRotation } from './rotatable';\nimport { getEnsemble } from './ensemble';\nimport { showSetup } from './DOMController';\n\nconst stagingArea = document.querySelector('.staging-area');\nconst previews = document.querySelectorAll('.img-preview');\nconst setBoardButton = document.querySelector('.set-board');\nconst clearButton = document.querySelector('.clear');\n\npreviews.forEach((preview) => preview.addEventListener('click', showStagedImage));\nclearButton.addEventListener('click', clearPlacedImages);\n\nlet remainingInstruments;\nlet currentBoard;\nfunction setupDOMBoard(board) {\n  setBoardButton.disabled = true;\n  remainingInstruments = Object.keys(getEnsemble());\n  currentBoard = board;\n  showSetup(currentBoard);\n  setBoardButton.addEventListener('click', () => emit('setPosition', currentBoard), { once: true });\n}\n\nfunction showStagedImage() {\n  const image = imageGenerator[this.id]();\n  image.classList.add('staging-img');\n  image.addEventListener('mousedown', dragStart);\n  if (stagingArea.firstChild) {\n    stagingArea.removeChild(stagingArea.firstChild);\n  }\n  stagingArea.appendChild(image);\n  setStagedImage(image); // for rotation\n}\n\nfunction clearPlacedImages() {\n  const children = Array.from(currentBoard.children);\n  children.forEach((element) => {\n    if (element.classList.contains('placed-img-wrapper')) {\n      element.remove();\n    } else {\n      element.classList.remove('highlight-placed');\n    }\n  });\n  previews.forEach((preview) => preview.classList.remove('disabled'));\n}\n\non('dragEvent', highlightHoveredCells);\non('dragEnd', handleRelease);\n\nfunction highlightHoveredCells(positionData) {\n  const { startX, endX, startY, endY } = positionData;\n\n  currentBoard.cells.forEach((cell) => {\n    const bound = cell.getBoundingClientRect();\n    const half = bound.width / 2;\n\n    const maxLeft = bound.left + half;\n    const minRight = bound.right - half;\n    const maxTop = bound.top + half;\n    const minBottom = bound.bottom - half;\n\n    if (startX < maxLeft && endX > minRight && startY < maxTop && endY > minBottom) {\n      cell.classList.add('highlight-hovered');\n    } else {\n      cell.classList.remove('highlight-hovered');\n    }\n  });\n}\n\nfunction handleRelease(element) {\n  const validArea = currentBoard.cells.filter(\n    (cell) =>\n      cell.classList.contains('highlight-hovered') && !cell.classList.contains('highlight-placed')\n  ).length;\n  if (validArea === element.area) {\n    placeImage(element);\n    element.remove();\n    updateHighlights();\n  } else {\n    resetDraggedImage(element);\n    removeDraggedHighlights();\n  }\n}\n\nfunction placeImage(element) {\n  const image = newTemplateImage(element.type);\n  const imageWrapper = newTemplateWrapper();\n  const startingCell = currentBoard.cells.findIndex((cell) =>\n    cell.classList.contains('highlight-hovered')\n  );\n\n  adjustForRotation(element, image);\n  imageWrapper.style.gridRow = `${Math.floor(startingCell / currentBoard.numRows) + 1} / span ${\n    element.spanY\n  }`;\n  imageWrapper.style.gridColumn = `${(startingCell % currentBoard.numRows) + 1} / span ${\n    element.spanX\n  }`;\n\n  imageWrapper.appendChild(image);\n  currentBoard.appendChild(imageWrapper);\n  updatePreviewImages(element.type);\n}\n\nfunction updatePreviewImages(instrument) {\n  const index = remainingInstruments.indexOf(instrument);\n  if (index > -1) {\n    remainingInstruments.splice(index, 1);\n  }\n  if (remainingInstruments.length === 0) {\n    setBoardButton.disabled = false;\n  }\n  document.getElementById(instrument).classList.add('disabled');\n}\n\nfunction newTemplateImage(type) {\n  const image = imageGenerator[type]();\n  image.classList.add('placed-img');\n  return image;\n}\n\nfunction newTemplateWrapper() {\n  const imageWrapper = document.createElement('div');\n  imageWrapper.classList.add('placed-img-wrapper');\n  return imageWrapper;\n}\n\nfunction removeDraggedHighlights() {\n  currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered'));\n}\n\nfunction updateHighlights() {\n  currentBoard.cells.forEach((cell) => {\n    if (cell.classList.contains('highlight-hovered')) {\n      cell.classList.remove('highlight-hovered');\n      cell.classList.add('highlight-placed');\n    }\n  });\n}\n\nexport { setupDOMBoard, newTemplateImage, newTemplateWrapper };\n","import shipFactory from './ship';\nimport { find1DSets } from './1DSetFinder';\nimport { find2DSets } from './2DSetFinder';\nimport { getShipData } from './DOMAdapter';\nimport { on, off } from './observer';\nimport { rowLength } from './boardSize';\n\nexport default function boardFactory() {\n  let totalShips = 0;\n  let shipsSunk = 0;\n  const placedShips = [];\n  const squares = [];\n  for (let i = 0; i < rowLength(); i++) {\n    squares[i] = [];\n    for (let j = 0; j < rowLength(); j++) {\n      squares[i][j] = {};\n    }\n  }\n\n  let boundSetPosition;\n  function listenForPosition() {\n    boundSetPosition = setPosition.bind(this);\n    on('setPosition', boundSetPosition);\n  }\n\n  function setPosition(DOMBoard) {\n    const ships = getShipData(DOMBoard);\n    Object.entries(ships).forEach((ship) => {\n      this.placeShip(ship[1], ship[0]);\n    });\n    off('setPosition', boundSetPosition);\n  }\n\n  const isOccupied = (coords) => {\n    if (typeof coords[0] === 'number') {\n      return !!squares[coords[0]][coords[1]].ship;\n    }\n    for (let i = 0; i < coords.length; i++) {\n      const coord = coords[i];\n      if (squares[coord[0]][coord[1]].ship) return true;\n    }\n    return false;\n  };\n\n  const outOfRange = (coords) => coords.flat().some((coord) => coord < 0 || coord > rowLength() - 1);\n\n  const placeShip = (coords, name) => {\n    if (outOfRange(coords)) throw new Error('Ships cannot be placed off the board');\n    if (isOccupied(coords)) throw new Error('Ships cannot be on top of ships');\n\n    const newShip = shipFactory(coords.length, name, coords);\n    coords.forEach((coord) => {\n      squares[coord[0]][coord[1]].ship = newShip;\n    });\n    totalShips++;\n    placedShips.push(newShip);\n  };\n\n  function receiveAttack(coords) {\n    const square = squares[coords[0]][coords[1]];\n    if (square.attacked) throw new Error('this square has already been attacked');\n    if (square.ship) {\n      square.ship.hit();\n      if (square.ship.isSunk()) shipsSunk++;\n    }\n    square.attacked = true;\n  }\n\n  function gameOver() {\n    return totalShips === shipsSunk;\n  }\n\n  // find1DSets is a faster algorithm for finding sets with width or length equal to 1\n  function findSets(x, y = 1) {\n    if (x === 1 || y === 1) {\n      const length = x === 1 ? y : x;\n      return find1DSets(this, length);\n    }\n    return find2DSets(this, x, y);\n  }\n\n  function emptySquares() {\n    const set = [];\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares.length; j++) {\n        if (!squares[i][j].ship) {\n          set.push([i, j]);\n        }\n      }\n    }\n    return set;\n  }\n\n  return {\n    findSets,\n    isOccupied,\n    placeShip,\n    receiveAttack,\n    gameOver,\n    emptySquares,\n    listenForPosition,\n    placedShips,\n    squares,\n    get size() {\n      return squares.length;\n    },\n  };\n}\n","let rows = 10;\n\nfunction rowLength() {\n  return rows;\n}\n\nfunction setRowLength(x) {\n  rows = x;\n}\n\nexport { rowLength, setRowLength }\n","function indexToCoordinates(index) {\n  const x = index % 10;\n  const y = Math.floor(index / 10);\n  return [x, y];\n}\n\nfunction coordinatesToIndex(coords) {\n  return coords[1] * 10 + coords[0];\n}\n\nexport { indexToCoordinates, coordinatesToIndex };\n","/* eslint-disable no-param-reassign */\nimport { emit } from './observer';\n\nlet cursorOffsetX;\nlet cursurOffsetY;\n\nfunction dragStart(e) {\n  e.preventDefault();\n  cursorOffsetX = e.clientX - this.offsetLeft;\n  cursurOffsetY = e.clientY - this.offsetTop;\n  this.classList.add('grabbing');\n\n  const boundDragMove = dragMove.bind(this);\n  document.addEventListener('mousemove', boundDragMove);\n  document.addEventListener(\n    'mouseup',\n    () => {\n      document.removeEventListener('mousemove', boundDragMove);\n      emit('dragEnd', this);\n    },\n    { once: true }\n  );\n}\n\nfunction dragMove(e) {\n  this.style.top = (e.clientY - cursurOffsetY).toString() + 'px';\n  this.style.left = (e.clientX - cursorOffsetX).toString() + 'px';\n  const bound = this.getBoundingClientRect();\n  const positionData = {\n    startX: bound.left,\n    endX: bound.right,\n    startY: bound.top,\n    endY: bound.bottom,\n  };\n\n  emit('dragEvent', positionData);\n}\n\nfunction resetDraggedImage(element) {\n  element.style.top = '';\n  element.style.left = '';\n}\n\nexport { dragStart, resetDraggedImage };\n","const ensemble = {\n  flute: [1, 3],\n  trombone: [1, 5],\n  clarinet: [1, 3],\n  violin: [1, 3],\n  bassoon: [1, 4],\n  cello: [2, 5],\n  horn: [2, 2],\n  piccolo: [1, 2],\n  trumpet: [1, 3],\n};\n\nfunction setEnsemble() {\n  // get user's choice of ensemble\n}\n\nfunction getEnsemble() {\n  return ensemble;\n}\n\nexport { setEnsemble, getEnsemble };\n","import boardFactory from './board';\nimport { humanPlayerFactory, computerPlayerFactory } from './player';\nimport { DOMBoardFactory } from './DOMBoard';\nimport { showBoards, setBoardSizes, setTurn } from './DOMController';\nimport { rowLength } from './boardSize';\nimport { emit } from './observer';\nimport { setEnsemble } from './ensemble';\n\nconst startButton = document.querySelector('.start-game');\nstartButton.addEventListener('click', beginSetup);\nconst setBoardButton = document.querySelector('.set-board');\n// mouse events need to be disabled if not valid\n\nlet player1;\nlet player2;\n\nlet board1; // eventually declare inside beginSetup?\nlet board2; // eventually declare inside beginSetup?\n\nfunction beginSetup() {\n  console.log('setup begins...');\n  setBoardSizes();\n  setEnsemble();\n  board1 = boardFactory();\n  board2 = boardFactory();\n  const DOMBoard1 = DOMBoardFactory('board1', rowLength());\n  const DOMBoard2 = DOMBoardFactory('board2', rowLength());\n  player1 = humanPlayerFactory(board1, board2, DOMBoard1);\n  player2 = computerPlayerFactory(board2, board1, DOMBoard2);\n\n  player1.setup();\n  setBoardButton.addEventListener('click', finishSetup, { once: true });\n}\n\nfunction finishSetup() {\n  player2.setup();\n  if (player2.isComputer()) {\n    startGame();\n  } else {\n    setBoardButton.addEventListener('click', startGame, { once: true });\n  }\n}\n\nfunction startGame() {\n  console.log('game starts!');\n  console.log('board1...');\n  console.log(board1);\n  console.log('board2...');\n  console.log(board2);\n  showBoards();\n  setTurn('player1');\n\n  emit('setPosition', 34); // testing that this has been unsubscribed\n}\n","import { rowLength } from \"./boardSize\";\n\nconst board = document.querySelector('.board');\nconst boardWidth = board.offsetWidth;\nconst squareWidth = boardWidth / rowLength(); // number of cells in row\n\nfunction flute() {\n  return newImage('flute', 1, 3);\n}\n\nfunction trombone() {\n  const image = newImage('trombone', 1, 5);\n  image.classList.add('stretch');\n  return image;\n}\n\nfunction clarinet() {\n  return newImage('clarinet', 1, 3);\n}\n\nfunction violin() {\n  return newImage('violin', 1, 3);\n}\n\nfunction bassoon() {\n  return newImage('bassoon', 1, 4);\n}\n\nfunction cello() {\n  return newImage('cello', 2, 5);\n}\n\nfunction horn() {\n  return newImage('horn', 2, 2);\n}\n\nfunction piccolo() {\n  return newImage('piccolo', 1, 2);\n}\n\nfunction trumpet() {\n  return newImage('trumpet', 1, 3);\n}\n\nfunction newImage(type, width, height) {\n  const image = new Image();\n  image.src = `./images/${type}.png`;\n  image.style.width = `${squareWidth * width}px`;\n  image.style.height = `${squareWidth * height}px`;\n  image.spanX = width;\n  image.spanY = height;\n  image.area = width * height;\n  image.type = type;\n  return image;\n}\n\nexport { clarinet, flute, trombone, violin, bassoon, cello, horn, trumpet, piccolo };\n","const events = {};\n\nfunction on(eventName, fn) {\n  events[eventName] ||= [];\n  events[eventName].push(fn);\n}\n\nfunction off(eventName, fn) {\n  if (!events[eventName]) return;\n\n  for (let i = 0; i < events[eventName].length; i++) {\n    if (events[eventName][i] === fn) {\n      events[eventName].splice(i, 1);\n      break;\n    }\n  }\n}\n\nfunction emit(eventName, data) {\n  if (!events[eventName]) return;\n\n  events[eventName].forEach((fn) => fn(data));\n}\n\nexport { on, off, emit };\n","import { rowLength } from \"./boardSize\";\nimport { getEnsemble } from \"./ensemble\";\n\nconst ships = getEnsemble();\n\nfunction humanPlayerFactory(homeBoard, opponentBoard, DOMBoard) {\n  function attack(coords) {\n    const coordinates = coords || getCoords();\n    opponentBoard.receiveAttack(coordinates);\n  }\n\n  function getCoords() {\n    // get coordinates from User/DOM\n  }\n\n  function placeShip(coords) {\n    homeBoard.placeShip(coords);\n  }\n\n  function setup() {\n    DOMBoard.setupBoard();\n    homeBoard.listenForPosition();\n  }\n\n  function isComputer() {\n    return false;\n  }\n\n  return { attack, placeShip, isComputer, setup };\n}\n\nfunction computerPlayerFactory(homeBoard, opponentBoard, DOMBoard) {\n  const size = rowLength();\n  const possibleMoves = [];\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      possibleMoves.push([i, j]);\n    }\n  }\n\n  function isComputer() {\n    return true;\n  }\n\n  function attack() {\n    if (possibleMoves.length === 0) throw new Error('there are no moves left');\n    const index = Math.floor(Math.random() * possibleMoves.length);\n    const move = possibleMoves[index];\n    possibleMoves[index] = possibleMoves[possibleMoves.length - 1];\n    possibleMoves.pop();\n    opponentBoard.receiveAttack(move);\n  }\n\n  function setup() {\n    Object.entries(ships).forEach((ship) => {\n      const name = ship[0];\n      const dimensions = ship[1];\n      const set = homeBoard.findSets(...dimensions);\n      const coords = set[Math.floor(Math.random() * set.length)];\n      homeBoard.placeShip(coords, name);\n    });\n    DOMBoard.placeSetImages(homeBoard);\n  }\n\n  return { attack, setup, isComputer };\n}\n\nexport { humanPlayerFactory, computerPlayerFactory };\n","/* eslint-disable no-param-reassign */\nconst rotateButton = document.querySelector('.rotate');\nrotateButton.addEventListener('click', rotate);\n\nlet currentStagedImage;\n\nfunction rotate() {\n  if (!currentStagedImage) return;\n  const rotation = Number(currentStagedImage.style.transform.match(/\\d+(?=deg)/)) % 360;\n  currentStagedImage.style.transform = `rotate(${rotation + 90}deg)`;\n}\n\nfunction setStagedImage(current) {\n  currentStagedImage = current;\n}\n\nfunction adjustForRotation(draggedImage, newImage) {\n  const rotation = Number(draggedImage.style.transform.match(/\\d+(?=deg)/)) % 360;\n  if (!rotation) return;\n  switch (rotation) {\n    case 90:\n      newImage.style.transform = `translateX(${newImage.style.height}) rotate(${rotation}deg)`;\n      break;\n    case 180:\n      newImage.style.transform = `translateY(100%) translateX(100%) rotate(${rotation}deg)`;\n      break;\n    default: // 270\n      newImage.style.transform = `translateY(${newImage.style.width}) rotate(${rotation}deg)`;\n  }\n  if (rotation !== 180) {\n    [draggedImage.spanY, draggedImage.spanX] = [draggedImage.spanX, draggedImage.spanY];\n  }\n}\n\nexport { rotate, setStagedImage, adjustForRotation };\n","export default function shipFactory(length, name, coordinateSet) {\n  let hits = 0;\n  const coords = coordinateSet;\n  const hit = () => {\n    if (hits < length) {\n      hits++;\n    } else {\n      throw new Error('You already sank this ship!');\n    }\n  };\n  const isSunk = () => hits === length;\n  return { hit, isSunk, name, coords };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './gameflow';\n"],"names":[],"sourceRoot":""}