{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;AC/CtB;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;AC5CtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kCAAkC,qBAAqB,KAAK,GAAG;AAC/D;;AAEA;AACA;AACA,uBAAuB,WAAW;AAClC,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;;;AC7BvB;AAC0D;AACqD;AACzE;AACiC;AAC/B;;AAEjC;AACP,gBAAgB,uEAAkB;;AAElC,EAAE,6CAAE;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,QAAQ;AACpB;AACA,IAAI,+CAAI,aAAa,QAAQ,gEAAkB,aAAa;AAC5D;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA,sDAAsD,iBAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA,IAAI,6DAAa;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,gEAAgB;AACpC,2BAA2B,kEAAkB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uEAAuB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,mBAAmB;AAC/D;AACA,+BAA+B,UAAU,SAAS,QAAQ;AAC1D,kCAAkC,UAAU,SAAS,QAAQ;AAC7D;;AAEA;AACA;AACA,kBAAkB,gEAAkB;AACpC,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjIA;AAC2C;AACF;;AAEzC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC,mBAAmB;AACrD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,EAAE,wDAAY;AACd,+CAA+C,UAAU;AACzD,4CAA4C,UAAU;AACtD,+CAA+C,UAAU;AACzD,4CAA4C,UAAU;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAeE;;;;;;;;;;;;;;;ACrLF;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA,uCAAuC,0BAA0B,IAAI,gBAAgB;AACrF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;;;;;;;;;;AC5BqB;AACb;AACqB;AACK;AACvB;AACG;;AAE5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,sDAAW;AAChD;AACA;AACA,EAAE,yDAAS;AACX,iDAAiD,+CAAI,iCAAiC,YAAY;AAClG,EAAE,6CAAE;AACJ,EAAE,6CAAE;AACJ;;AAEA;AACA,gBAAgB,4CAAc;AAC9B;AACA,sCAAsC,iDAAS;AAC/C,uCAAuC,iDAAS;AAChD;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAc,SAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA,qCAAqC,sDAAW;AAChD;AACA,EAAE,+CAAI;AACN;;AAEA;AACA;;AAEA;AACA,UAAU,mCAAmC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,IAAI,6DAAiB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,6DAAiB;AACnB,kCAAkC,qDAAqD;AACvF;AACA,GAAG;AACH,qCAAqC,2CAA2C,SAAS,cAAc;;AAEvG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,WAAW;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,4CAAc;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEwF;;;;;;;;;;;;;;;;;;;;;ACvMvD;AACU;AACA;AACA;AACA;AACH;;AAEzB;AACf;AACA;AACA;AACA;AACA,kBAAkB,IAAI,qDAAS,IAAI;AACnC;AACA,oBAAoB,IAAI,qDAAS,IAAI;AACrC;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B,oBAAoB,IAAI,qDAAS,IAAI;AACrC,sBAAsB,IAAI,qDAAS,IAAI;AACvC,mCAAmC,mCAAmC;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,6CAAE,mCAAmC;AACzC,IAAI,6CAAE,+BAA+B;AACrC;;AAEA;AACA,IAAI,8CAAG;AACP;;AAEA;AACA,kBAAkB,wDAAW;AAC7B;AACA;AACA,KAAK;AACL,IAAI,8CAAG;AACP,IAAI,8CAAG;AACP;;AAEA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;;AAEA,oFAAoF,qDAAS;;AAE7F;AACA;AACA;;AAEA,oBAAoB,iDAAW;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,EAAE,6CAAE;;AAEJ;AACA;;AAEA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+CAAI,WAAW,4BAA4B;AACnD;AACA;AACA;AACA,IAAI,+CAAI,kBAAkB,aAAa;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB;AACA,WAAW,wDAAU;AACrB;;AAEA;AACA;AACA,oBAAoB,oBAAoB;AACxC,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;ACpIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEmC;;;;;;;;;;;;;;;;;ACVK;;AAExC;AACA,eAAe,qDAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA,eAAe,qDAAS;AACxB;AACA;;AAEkD;;;;;;;;;;;;;;;;;ACdlD;AACkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,+CAAI;AACV,KAAK;AACL,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,+CAAI;AACV,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,+CAAI;AACN;;AAEA;AACA;AACA;AACA;;AAEwC;;;;;;;;;;;;;;;;ACvDxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEoC;;;;;;;;;;;;;;;;;;;;;AC5DD;AACkC;AACxB;AAYpB;AACe;AACS;AACK;AACb;AACU;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC,uDAAW;AAClD,uCAAuC,uDAAW;AAClD;;AAEA,qBAAqB,gEAAkB;AACvC,qBAAqB,gEAAkB;;AAEvC;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,sDAAW;AACb,EAAE,iEAAiB;AACnB,EAAE,6DAAa;AACf;AACA,iBAAiB,kDAAY;AAC7B,iBAAiB,kDAAY;AAC7B,cAAc,0DAAe,WAAW,qDAAS;AACjD,cAAc,0DAAe,WAAW,qDAAS;AACjD,YAAY,2DAAkB;AAC9B;AACA;AACA,QAAQ,8DAAqB;AAC7B,mBAAmB,2DAAkB;AACrC;AACA;AACA,0DAA0D,YAAY;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,0DAA0D,YAAY;AACtE;AACA;;AAEA;AACA,EAAE,gEAAgB;AAClB,EAAE,+DAAe;AACjB;AACA;AACA,EAAE,6CAAE,SAAS,uDAAW;AACxB,EAAE,6CAAE,oCAAoC,sDAAsD;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAU;AACd,IAAI;AACJ,IAAI,2DAAW;AACf;AACA,MAAM,0DAAU;AAChB;AACA,KAAK;AACL;AACA;;AAEA;AACA,EAAE,gEAAgB;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE,wDAAQ;AACV,EAAE,0DAAe;AACjB,EAAE,mEAAkB;AACpB;AACA;AACA;AACA,6DAA6D,YAAY;AACzE,2DAA2D,YAAY;AACvE;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC9MA;AACsD;;AAEtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD,0BAA0B,0BAA0B;AACpD;;AAEA;AACA;AACA,EAAE,mEAAuB;AACzB;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEyG;;;;;;;;;;;;;;;AC/ElG;AACP;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACzCA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAE0C;;;;;;;;;;;;;;;;;;AC5BF;AACC;;AAEzC;AACA,gBAAgB,sDAAW;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA,gBAAgB,sDAAW;AAC3B,eAAe,qDAAS;AACxB;AACA,kBAAkB,UAAU;AAC5B,oBAAoB,UAAU;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oCAAoC;AACtE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEqD;;;;;;;;;;;;;;;;;;AC3FrD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sBAAsB,WAAW,SAAS;AACzF;AACA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA,+CAA+C,qBAAqB,WAAW,SAAS;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB;AAC1B;AACA,4EAA4E;AAC5E,IAAI;AACJ,2EAA2E;AAC3E;AACA;;AAE8E;;;;;;;;;;;;;;;AC5C/D;AACf;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,WAAW;AACX;;;;;;;UCZA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNoB","sources":["webpack://battleship/./src/1DSetFinder.js","webpack://battleship/./src/2DSetFinder.js","webpack://battleship/./src/DOMAdapter.js","webpack://battleship/./src/DOMBoard.js","webpack://battleship/./src/DOMController.js","webpack://battleship/./src/DOMInitializeBoard.js","webpack://battleship/./src/DOMSetupBoard.js","webpack://battleship/./src/board.js","webpack://battleship/./src/boardSize.js","webpack://battleship/./src/coordinates.js","webpack://battleship/./src/draggable.js","webpack://battleship/./src/ensemble.js","webpack://battleship/./src/gameflow.js","webpack://battleship/./src/imageGenerator.js","webpack://battleship/./src/moveTracker.js","webpack://battleship/./src/observer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/rotatable.js","webpack://battleship/./src/ship.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["function find1DSets(board, length) {\n  if (length === 1) return board.emptySquares();\n  let sets = [];\n  for (let i = 0; i < board.size; i++) {\n    const horizontal = [];\n    const vertical = [];\n    for (let j = 0; j < board.size; j++) {\n      horizontal.push([j, i]);\n      vertical.push([i, j]);\n    }\n    sets = [\n      ...sets,\n      ...findSetsFromRow(horizontal, length, board),\n      ...findSetsFromRow(vertical, length, board),\n    ];\n  }\n  if (sets.length === 0) throw new Error('No sets found with given parameters');\n  return sets;\n}\n\nfunction findSetsFromRow(row, length, board) {\n  let lft = 0;\n  let rt = 1;\n  const sets = [];\n\n  while (rt < row.length) {\n    if (board.isOccupied([[row[lft][0], row[lft][1]]])) {\n      lft = rt;\n      rt += 1;\n    } else if (board.isOccupied([[row[rt][0], row[rt][1]]])) {\n      lft = rt + 1;\n      rt += 2;\n    } else if (rt - lft + 1 === length) {\n      const set = [];\n      for (let j = lft; j <= rt; j++) {\n        set.push(row[j]);\n      }\n      sets.push(set);\n      lft++;\n      rt++;\n    } else {\n      rt++;\n    }\n  }\n  return sets;\n}\n\nexport { find1DSets };\n","function find2DSets(board, width, height) {\n  let sets = [];\n  for (let i = 0; i <= board.size - width; i++) {\n    const horizontal = [];\n    const vertical = [];\n    for (let j = 0; j < board.size; j++) {\n      horizontal.push(createXComponent(j, i, width));\n      if (width !== height) vertical.push(createYComponent(j, i, width));\n    }\n    const rotatedSets = width === height ? [] : findSetsFromRows(vertical, height, board);\n    sets = [...sets, ...findSetsFromRows(horizontal, height, board), ...rotatedSets];\n  }\n  if (sets.length === 0) throw new Error('No sets found with given parameters');\n  return sets;\n}\n\n\nfunction createXComponent(fixed, variable, length) {\n  const component = [];\n  for (let idx = 0; idx < length; idx++) {\n    component.push([variable + idx, fixed]);\n  }\n  return component;\n}\n\nfunction createYComponent(fixed, variable, length) {\n  const component = [];\n  for (let idx = 0; idx < length; idx++) {\n    component.push([fixed, variable + idx]);\n  }\n  return component;\n}\n\nfunction findSetsFromRows(rows, length, board) {\n  const sets = [];\n  for (let i = 0; i <= rows.length - length; i++) {\n    const candidateSet = rows.slice(i, i + length).flat();\n    if (!board.isOccupied(candidateSet)) {\n      sets.push(candidateSet);\n    }\n  }\n  return sets;\n}\n\nexport { find2DSets };\n","function getShipData(DOMboard) {\n  return Array.from(DOMboard.children)\n    .filter((element) => element.classList.contains('placed-img-wrapper'))\n    .map((element) => {\n      const [rowStart, colStart, rowSpan, colSpan] = element.style.gridArea\n        .match(/\\d+/g)\n        .map(Number);\n      const yStart = rowStart - 1;\n      const yEnd = yStart + rowSpan - 1;\n      const xStart = colStart - 1;\n      const xEnd = xStart + colSpan - 1;\n      const name = element.firstChild.type;\n      const object = {};\n      object[name] = getCoordinates(xStart, xEnd, yStart, yEnd);\n      return object;\n    })\n    .reduce((object, entry) => ({ ...object, ...entry }), {}); // converts array of objects into 1 object\n}\n\nfunction getCoordinates(xStart, xEnd, yStart, yEnd) {\n  const set = [];\n  for (let x = xStart; x <= xEnd; x++) {\n    for (let y = yStart; y <= yEnd; y++) {\n      set.push([x, y]);\n    }\n  }\n  return set;\n}\n\nexport { getShipData };\n","/* eslint-disable no-param-reassign */\nimport { initializeDOMBoard } from './DOMInitializeBoard';\nimport { setupDOMBoard, newTemplateImage, newTemplateWrapper, disableAllPreviewImages } from './DOMSetupBoard';\nimport { on, emit } from './observer';\nimport { coordinatesToIndex, indexToCoordinates } from './coordinates';\nimport { rowLength } from './boardSize';\n\nexport function DOMBoardFactory(id, ROWS) {\n  const board = initializeDOMBoard(id, ROWS);\n\n  on('boardChange', updateBoard);\n\n  function listenForAttack() {\n    board.addEventListener('click', receiveAttack);\n  }\n\n  function unlistenForAttack() {\n    board.removeEventListener('click', receiveAttack);\n  }\n\n  function setOffense() {\n    board.classList.remove('defense');\n    board.classList.add('offense');\n  }\n\n  function setDefense() {\n    board.classList.remove('offense');\n    board.classList.add('defense');\n  }\n\n  function disable() {\n    board.classList.add('disabled');\n  }\n\n  function enable() {\n    board.classList.remove('disabled');\n  }\n\n  function setGameOver() {\n    board.classList.add('disabled');\n    board.classList.add('game-over');\n  }\n\n  function receiveAttack(e) {\n    const { index } = e.target.dataset;\n    if (!index) return;\n    emit('attack', { coords: indexToCoordinates(index), id });\n  }\n\n  function updateBoard(boardData) {\n    if (boardData.id !== id) return;\n\n    boardData.squares.forEach((row, i) => {\n      row.forEach((square, j) => {\n        const index = i + j * rowLength();\n        if (square.ship?.isSunk()) {\n          const img = board.querySelector(`img[src*=${square.ship.name}].placed-img`);\n          img.parentElement.classList.add('sunk');\n          board.cells[index].classList.add('sunk');\n        }\n        if (square.attacked) {\n          board.cells[index].classList.add('attacked');\n        }\n      });\n    });\n  }\n\n  function setupBoard() {\n    setupDOMBoard(board);\n  }\n\n  function clearBoard() {\n    const children = Array.from(board.children);\n    children.forEach((node) => {\n      if (node.classList.contains('permanent')) {\n        return;\n      }\n      if (node.classList.contains('cell')) {\n        node.classList.remove('highlight-placed');\n        return;\n      }\n      node.remove();\n    });\n  }\n\n  function placeSetImages(dataBoard) {\n    // places on DOMboard (board variable) all images from board object argument\n    clearBoard();\n    dataBoard.placedShips.forEach((ship) => {\n      const image = newTemplateImage(ship.name);\n      const imageWrapper = newTemplateWrapper();\n      setPosition(image, imageWrapper, ship.coords);\n      addPlacedClass(ship.coords);\n      imageWrapper.appendChild(image);\n      board.appendChild(imageWrapper);\n    });\n    disableAllPreviewImages();\n  }\n\n  function setPosition(image, wrapper, set) {\n    const rowStart = set.reduce((min, coord) => (coord[1] < min ? coord[1] : min), 100) + 1;\n    const rowSpan = set.reduce((max, coord) => (coord[1] > max ? coord[1] : max), -100) + 2 - rowStart;\n    const colStart = set.reduce((min, coord) => (coord[0] < min ? coord[0] : min), 100) + 1;\n    const colSpan = set.reduce((max, coord) => (coord[0] > max ? coord[0] : max), -100) + 2 - colStart;\n\n    if (colSpan > rowSpan) {\n      image.style.transform = `translateX(${image.style.height}) rotate(90deg)`;\n    }\n    wrapper.style.gridRow = `${rowStart} / span ${rowSpan}`;\n    wrapper.style.gridColumn = `${colStart} / span ${colSpan}`;\n  }\n\n  function addPlacedClass(set) {\n    set.forEach((coords) => {\n      board.cells[coordinatesToIndex(coords)].classList.add('highlight-placed');\n    });\n  }\n\n  return {\n    setOffense,\n    setDefense,\n    setupBoard,\n    placeSetImages,\n    listenForAttack,\n    unlistenForAttack,\n    disable,\n    enable,\n    setGameOver,\n  };\n}\n","/* eslint-disable no-param-reassign */\nimport { setRowLength } from './boardSize';\nimport { getEnsemble } from './ensemble';\n\nconst controlPanel = document.querySelector('.control-panel');\nconst startRoundButton = document.querySelector('.start-round');\n\nconst setupContainer = document.querySelector('.board-setup-container');\nconst stagingArea = document.querySelector('.staging-area');\n\nconst board1 = document.querySelector('#board1');\nconst board2 = document.querySelector('#board2');\nconst fleetContainers = document.querySelectorAll('.remaining-fleet');\nconst fleet = document.querySelectorAll('.fleet');\nconst attackDirection = document.querySelector('.attack-direction');\nconst gameState = document.querySelector('.game-state');\n\nconst switchButton = document.querySelector('.switch-turns');\nconst curtains = document.querySelectorAll('.curtain');\nconst infoButtons = document.querySelectorAll('.info');\nconst intro = document.querySelector('.intro-text');\n\nconst moveTrackers = document.querySelectorAll('.moves');\n\nfunction setWindowHeight() {\n  document.body.style.height = `${window.innerHeight}px`;\n}\n\nsetWindowHeight();\nwindow.addEventListener('resize', setWindowHeight);\n\nfunction resetDOM() {\n  board1.classList.add('hidden');\n  board2.classList.add('hidden');\n  board1.classList.remove('defense');\n  board2.classList.remove('defense');\n  board1.classList.remove('offense');\n  board2.classList.remove('offense');\n  board1.classList.remove('game-over');\n  board2.classList.remove('game-over');\n  setupContainer.classList.add('hidden');\n  controlPanel.classList.remove('setup');\n  controlPanel.classList.remove('in-game');\n  controlPanel.classList.remove('two-player');\n  controlPanel.classList.add('preferences');\n  curtains.forEach((curtain) => curtain.classList.add('invisible'));\n  fleetContainers.forEach((container) => {\n    container.classList.add('invisible');\n    container.classList.add('opaque');\n    container.classList.remove('active');\n  });\n  fleet.forEach((instrument) => instrument.classList.remove('sunk'));\n  attackDirection.classList.add('invisible');\n  attackDirection.classList.remove('player2');\n  gameState.textContent = 'Attack!';\n  moveTrackers.forEach((tracker) => tracker.classList.add('hidden'));\n  infoButtons.forEach((button) => {\n    button.classList.add('hidden');\n    button.textContent = 'info';\n  });\n  stagingArea.innerHTML = '';\n}\n\nfunction showSetup(board) {\n  setupContainer.classList.remove('hidden');\n  board.classList.remove('hidden');\n  if (board1 === board) {\n    board2.classList.add('hidden');\n  } else {\n    board1.classList.add('hidden');\n  }\n  const previews = document.querySelectorAll('.img-preview');\n  const whiteList = Object.keys(getEnsemble());\n  previews.forEach((preview) => {\n    if (whiteList.includes(preview.dataset.inst)) {\n      preview.classList.remove('hidden');\n    } else {\n      preview.classList.add('hidden');\n    }\n  });\n}\n\nfunction setBoardSizes() {\n  const rowLength = Number(document.querySelector('.size-select').value) || 10;\n  setRowLength(rowLength);\n  board1.style.gridTemplateColumns = `repeat(${rowLength}, 1fr)`;\n  board1.style.gridTemplateRows = `repeat(${rowLength}, 1fr)`;\n  board2.style.gridTemplateColumns = `repeat(${rowLength}, 1fr)`;\n  board2.style.gridTemplateRows = `repeat(${rowLength}, 1fr)`;\n}\n\nfunction showBoards() {\n  setupContainer.classList.add('hidden');\n  board1.classList.remove('hidden');\n  board2.classList.remove('hidden');\n  setTimeout(() => fleetContainers.forEach((container) => container.classList.remove('invisible')), 50);\n  const whiteList = Object.keys(getEnsemble());\n  fleet.forEach((instrument) => {\n    if (whiteList.includes(instrument.dataset.inst)) {\n      instrument.classList.remove('hidden');\n    } else {\n      instrument.classList.add('hidden');\n    }\n  });\n}\n\nfunction setPlayRoundView() {\n  curtains.forEach((curtain) => curtain.classList.add('invisible'));\n  uncoverFleets();\n  attackDirection.classList.remove('invisible');\n  attackDirection.classList.remove('opaque');\n  switchButton.disabled = true;\n  startRoundButton.disabled = true;\n}\n\nfunction updateFleet(data) {\n  const targetContainer = data.id === 'board1' ? board1 : board2;\n  const target = targetContainer.querySelector(`.${data.inst}`);\n  target.classList.add('sunk');\n}\n\nfunction coverBoards() {\n  curtains.forEach((curtain) => curtain.classList.remove('invisible'));\n  setTimeout(() => {\n    startRoundButton.disabled = false;\n  }, 2000);\n  switchButton.disabled = true;\n  moveTrackers.forEach((tracker) => tracker.classList.add('hidden'));\n  fleetContainers.forEach((container) => container.classList.remove('active'));\n  infoButtons.forEach((button) => {\n    button.textContent = 'info';\n  });\n}\n\nfunction coverFleets() {\n  fleetContainers.forEach((container) => container.classList.add('opaque'));\n}\n\nfunction uncoverFleets() {\n  fleetContainers.forEach((container) => container.classList.remove('opaque'));\n}\n\nfunction setSetupPanelView() {\n  intro.classList.add('hidden');\n  controlPanel.classList.remove('preferences');\n  controlPanel.classList.add('setup');\n}\n\nfunction setGamePanelView() {\n  controlPanel.classList.remove('setup');\n  controlPanel.classList.add('in-game');\n}\n\nfunction showInfoButtons() {\n  infoButtons.forEach((button) => button.classList.remove('hidden'));\n}\n\ninfoButtons.forEach((button) =>\n  button.addEventListener('click', () => {\n    const currentIcon = button.textContent;\n    button.textContent = currentIcon === 'info' ? 'cancel' : 'info';\n\n    const targetBoard = button.dataset.board === '1' ? board1 : board2;\n    const targetFleetContainer = targetBoard.querySelector('.remaining-fleet');\n    targetFleetContainer.classList.toggle('active');\n  })\n);\n\nexport {\n  showBoards,\n  showSetup,\n  setBoardSizes,\n  setPlayRoundView,\n  setSetupPanelView,\n  setGamePanelView,\n  resetDOM,\n  coverBoards,\n  updateFleet,\n  coverFleets,\n  uncoverFleets,\n  showInfoButtons,\n};\n","/* eslint-disable no-param-reassign */\nfunction createGrid(rows, board) {\n  // HTML element remains after a reset; revert back to initial state\n  const children = Array.from(board.children);\n  children.forEach((node) => {\n    if (node.classList.contains('permanent')) {\n      return;\n    }\n    node.remove();\n  });\n\n  board.cells = [];\n  for (let i = 0; i < rows * rows; i++) {\n    board.cells[i] = document.createElement('div');\n    board.cells[i].classList.add('cell');\n    board.cells[i].style.gridArea = `${Math.floor(i / rows) + 1} / ${(i % rows) + 1} / span 1 / span 1`;\n    board.cells[i].dataset.index = i;\n    board.appendChild(board.cells[i]);\n  }\n}\n\nfunction initializeDOMBoard(id, rows) {\n  const board = document.getElementById(id);\n  board.numRows = rows;\n  createGrid(rows, board);\n  return board;\n}\n\nexport { initializeDOMBoard };\n","import * as imageGenerator from './imageGenerator';\nimport { on, emit } from './observer';\nimport { dragStart, resetDraggedImage } from './draggable';\nimport { setStagedImage, adjustForRotation } from './rotatable';\nimport { getEnsemble } from './ensemble';\nimport { showSetup } from './DOMController';\n\nconst stagingArea = document.querySelector('.staging-area');\nconst previewContainer = document.querySelector('.preview-container');\nconst previews = document.querySelectorAll('.img-preview');\nconst setBoardButton = document.querySelector('.set-board');\nconst clearButton = document.querySelector('.clear');\n\npreviews.forEach((preview) => preview.addEventListener('click', showStagedImage));\nclearButton.addEventListener('click', clearPlacedImages);\n\nlet remainingInstruments;\nlet currentBoard;\nfunction setupDOMBoard(board) {\n  setBoardButton.disabled = true;\n  remainingInstruments = Object.keys(getEnsemble());\n  enablePreviewImages();\n  currentBoard = board;\n  showSetup(currentBoard);\n  setBoardButton.addEventListener('click', () => emit('setPosition', currentBoard), { once: true });\n  on('dragEvent', highlightHoveredCells);\n  on('dragEnd', handleRelease);\n}\n\nfunction showStagedImage() {\n  const image = imageGenerator[this.dataset.inst]();\n  image.classList.add('staging-img');\n  image.addEventListener('mousedown', dragStart);\n  image.addEventListener('touchstart', dragStart);\n  if (stagingArea.firstChild) {\n    stagingArea.firstChild.removeResizeListener();\n    stagingArea.removeChild(stagingArea.firstChild);\n  }\n  stagingArea.appendChild(image);\n  setStagedImage(image); // for rotation\n}\n\nfunction clearPlacedImages() {\n  const children = Array.from(currentBoard.children);\n  children.forEach((element) => {\n    if (element.classList.contains('placed-img-wrapper')) {\n      element.firstChild.removeResizeListener();\n      element.remove();\n    } else {\n      element.classList.remove('highlight-placed');\n    }\n  });\n  previews.forEach((preview) => preview.classList.remove('disabled'));\n  remainingInstruments = Object.keys(getEnsemble());\n  setBoardButton.disabled = true;\n  emit('clearPosition');\n}\n\nlet cellsToHighlight = [];\nlet cellsToUnhighlight = [];\n\nfunction highlightHoveredCells(positionData) {\n  const { startX, endX, startY, endY, area } = positionData;\n\n  currentBoard.cells.forEach((cell) => {\n    const bound = cell.getBoundingClientRect();\n    const errorTolerance = isWithinBoard(startX, endX, startY, endY) ? 1 : -0.3;\n    const half = bound.width / 2 + errorTolerance;\n    // errorTolerance provides some leeway to pass comparisons (rounding errors, etc.);\n    // however, if the image is not fully within the board, comparisons need to be stricter to avoid\n    // highlighting a set of cells with the wrong dimensions (the check in commitValidHighlights\n    // is not helpful in this case because the size of the set could still be within the limit)\n\n    const maxLeft = bound.left + half;\n    const minRight = bound.right - half;\n    const maxTop = bound.top + half;\n    const minBottom = bound.bottom - half;\n\n    if (startX < maxLeft && endX > minRight && startY < maxTop && endY > minBottom) {\n      cellsToHighlight.push(cell);\n    } else {\n      cellsToUnhighlight.push(cell);\n    }\n  });\n  commitValidHighlights(area);\n  cellsToHighlight = [];\n  cellsToUnhighlight = [];\n}\n\nfunction commitValidHighlights(targetArea) {\n  // if too many cells are in cellsToHighlight because the image is straddling a border, do nothing.\n  // perform this check before filtering; otherwise a set of cells with the wrong dimensions could\n  // be incorrectly highlighted\n  if (cellsToHighlight.length > targetArea) {\n    return;\n  }\n  cellsToHighlight = cellsToHighlight.filter((cell) => !cell.classList.contains('highlight-placed'));\n  // if cellsToHighlight.length is less than targetArea, image is partially off board or partially over\n  // an already-placed image\n  if (cellsToHighlight.length < targetArea) {\n    cellsToHighlight.forEach((cell) => cell.classList.add('highlight-hovered-invalid'));\n    cellsToUnhighlight.forEach((cell) => cell.classList.remove('highlight-hovered-invalid'));\n    currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered'));\n  } else if (cellsToHighlight.length === targetArea) {\n    cellsToHighlight.forEach((cell) => cell.classList.add('highlight-hovered'));\n    cellsToUnhighlight.forEach((cell) => cell.classList.remove('highlight-hovered'));\n    currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered-invalid'));\n  }\n}\n\nfunction isWithinBoard(startX, endX, startY, endY) {\n  const bound = currentBoard.getBoundingClientRect();\n  return bound.left <= startX && bound.right >= endX && bound.top <= startY && bound.bottom >= endY;\n}\n\nfunction handleRelease(element) {\n  const validArea = currentBoard.cells.filter(\n    (cell) =>\n      cell.classList.contains('highlight-hovered') && !cell.classList.contains('highlight-placed')\n  ).length;\n  if (validArea === element.area) {\n    placeImage(element);\n    element.removeResizeListener();\n    element.remove();\n    updateHighlights();\n  } else {\n    resetDraggedImage(element);\n    removeDraggedHighlights();\n  }\n}\n\nfunction placeImage(element) {\n  const image = newTemplateImage(element.type);\n  const imageWrapper = newTemplateWrapper();\n  const startingCell = currentBoard.cells.findIndex((cell) =>\n    cell.classList.contains('highlight-hovered')\n  );\n\n  adjustForRotation(element, image);\n  imageWrapper.style.gridRow = `${Math.floor(startingCell / currentBoard.numRows) + 1} / span ${\n    element.spanY\n  }`;\n  imageWrapper.style.gridColumn = `${(startingCell % currentBoard.numRows) + 1} / span ${element.spanX}`;\n\n  imageWrapper.appendChild(image);\n  currentBoard.appendChild(imageWrapper);\n  disablePreviewImage(element.type);\n  updateRemainingInstruments(element.type);\n}\n\nfunction updateRemainingInstruments(instrument) {\n  const index = remainingInstruments.indexOf(instrument);\n  if (index > -1) {\n    remainingInstruments.splice(index, 1);\n  }\n  if (remainingInstruments.length === 0) {\n    setBoardButton.disabled = false;\n  }\n}\n\nfunction disablePreviewImage(instrument) {\n  previewContainer.querySelector(`.${instrument}`).classList.add('disabled');\n}\n\nfunction disableAllPreviewImages() {\n  previews.forEach((preview) => preview.classList.add('disabled'));\n  setBoardButton.disabled = false;\n}\n\nfunction enablePreviewImages() {\n  previews.forEach((preview) => preview.classList.remove('disabled'));\n}\n\nfunction newTemplateImage(type) {\n  const image = imageGenerator[type]();\n  image.classList.add('placed-img');\n  return image;\n}\n\nfunction newTemplateWrapper() {\n  const imageWrapper = document.createElement('div');\n  imageWrapper.classList.add('placed-img-wrapper');\n  return imageWrapper;\n}\n\nfunction removeDraggedHighlights() {\n  currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered'));\n  currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered-invalid'));\n}\n\nfunction updateHighlights() {\n  currentBoard.cells.forEach((cell) => {\n    if (cell.classList.contains('highlight-hovered')) {\n      cell.classList.remove('highlight-hovered');\n      cell.classList.add('highlight-placed');\n    }\n  });\n}\n\nexport { setupDOMBoard, newTemplateImage, newTemplateWrapper, disableAllPreviewImages };\n","import shipFactory from './ship';\nimport { find1DSets } from './1DSetFinder';\nimport { find2DSets } from './2DSetFinder';\nimport { getShipData } from './DOMAdapter';\nimport { on, off, emit } from './observer';\nimport { rowLength } from './boardSize';\n\nexport default function boardFactory(id) {\n  let totalShips = 0;\n  let shipsSunk = 0;\n  const placedShips = [];\n  const squares = [];\n  for (let i = 0; i < rowLength(); i++) {\n    squares[i] = [];\n    for (let j = 0; j < rowLength(); j++) {\n      squares[i][j] = {};\n    }\n  }\n\n  function resetSetup() {\n    totalShips = 0;\n    placedShips.length = 0; // reassigning placedShips to [] messes up reference\n    for (let i = 0; i < rowLength(); i++) {\n      for (let j = 0; j < rowLength(); j++) {\n        delete squares[i][j].ship; // reassigning squares[i][j] to {} similarly causes bugs\n      }\n    }\n  }\n\n  let boundSetPosition;\n  function listenForPosition() {\n    boundSetPosition = setPosition.bind(this);\n    on('setPosition', boundSetPosition); // board listens for setup onto the DOMBoard to be finalized\n    on('clearPosition', resetSetup); // autoSetup() relies on adding ships to the board object, not just the DOMBoard\n  }\n\n  function unlistenForPosition() {\n    off('setPosition', boundSetPosition);\n  }\n\n  function setPosition(DOMBoard) {\n    const ships = getShipData(DOMBoard);\n    Object.entries(ships).forEach((ship) => {\n      this.placeShip(ship[1], ship[0]);\n    });\n    off('setPosition', boundSetPosition);\n    off('clearPosition', resetSetup);\n  }\n\n  const isOccupied = (coords) => {\n    for (let i = 0; i < coords.length; i++) {\n      const coord = coords[i];\n      if (squares[coord[0]][coord[1]].ship) return true;\n    }\n    return false;\n  };\n\n  const outOfRange = (coords) => coords.flat().some((coord) => coord < 0 || coord > rowLength() - 1);\n\n  function placeShip(coords, name) {\n    if (outOfRange(coords)) throw new Error('Ships cannot be placed off the board');\n    if (isOccupied(coords)) throw new Error('Ships cannot be on top of ships');\n\n    const newShip = shipFactory(coords.length, name, coords);\n    coords.forEach((coord) => {\n      squares[coord[0]][coord[1]].ship = newShip;\n    });\n    totalShips++;\n    placedShips.push(newShip);\n  }\n\n  on('attack', receiveAttack);\n\n  function receiveAttack(attackData) {\n    if (attackData.id !== id) return;\n\n    const { coords } = attackData;\n    const square = squares[coords[0]][coords[1]];\n    if (square.attacked) throw new Error('this square has already been attacked');\n    if (square.ship) {\n      square.ship.hit();\n      if (square.ship.isSunk()) {\n        shipsSunk++;\n        emit('sunk', { id, inst: square.ship.name });\n      }\n    }\n    square.attacked = true;\n    emit('boardChange', { squares, id });\n  }\n\n  function allShipsSunk() {\n    return totalShips === shipsSunk;\n  }\n\n  // find1DSets is a faster algorithm for finding sets with width or length equal to 1\n  function findSets(x, y = 1) {\n    if (x === 1 || y === 1) {\n      const length = x === 1 ? y : x;\n      return find1DSets(this, length);\n    }\n    return find2DSets(this, x, y);\n  }\n\n  function emptySquares() {\n    const set = [];\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares.length; j++) {\n        if (!squares[i][j].ship) {\n          set.push([i, j]);\n        }\n      }\n    }\n    return set;\n  }\n\n  return {\n    findSets,\n    isOccupied,\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    emptySquares,\n    listenForPosition,\n    unlistenForPosition,\n    resetSetup,\n    placedShips,\n    squares,\n    id,\n    get size() {\n      return squares.length;\n    },\n  };\n}\n","let rows = 10;\n\nfunction rowLength() {\n  return rows;\n}\n\nfunction setRowLength(x) {\n  rows = x;\n}\n\nexport { rowLength, setRowLength };\n","import { rowLength } from './boardSize';\n\nfunction indexToCoordinates(index) {\n  const size = rowLength();\n  const x = index % size;\n  const y = Math.floor(index / size);\n  return [x, y];\n}\n\nfunction coordinatesToIndex(coords) {\n  const size = rowLength();\n  return coords[1] * size + coords[0];\n}\n\nexport { indexToCoordinates, coordinatesToIndex };\n","/* eslint-disable no-param-reassign */\nimport { emit } from './observer';\n\nlet cursorOffsetX;\nlet cursurOffsetY;\n\nfunction dragStart(e) {\n  e.preventDefault();\n  cursorOffsetX = (e.clientX || e.touches[0].screenX) - this.offsetLeft;\n  cursurOffsetY = (e.clientY || e.touches[0].screenY) - this.offsetTop;\n  this.classList.add('grabbing');\n\n  const boundDragMove = dragMove.bind(this);\n\n  document.addEventListener('mousemove', boundDragMove);\n  document.addEventListener(\n    'mouseup',\n    () => {\n      document.removeEventListener('mousemove', boundDragMove);\n      emit('dragEnd', this);\n    },\n    { once: true }\n  );\n\n  document.addEventListener('touchmove', boundDragMove);\n  document.addEventListener(\n    'touchend',\n    () => {\n      document.removeEventListener('touchmove', boundDragMove);\n      emit('dragEnd', this);\n    },\n    { once: true }\n  );\n}\n\nfunction dragMove(e) {\n  this.style.top = ((e.clientY || e.touches[0].screenY) - cursurOffsetY).toString() + 'px';\n  this.style.left = ((e.clientX || e.touches[0].screenX) - cursorOffsetX).toString() + 'px';\n  const bound = this.getBoundingClientRect();\n  const positionData = {\n    startX: bound.left,\n    endX: bound.right,\n    startY: bound.top,\n    endY: bound.bottom,\n    area: this.area,\n  };\n\n  emit('dragEvent', positionData);\n}\n\nfunction resetDraggedImage(element) {\n  element.style.top = '';\n  element.style.left = '';\n}\n\nexport { dragStart, resetDraggedImage };\n","let ensemble = {\n  cello: [2, 5],\n  trombone: [1, 5],\n  bassoon: [1, 4],\n  horn: [2, 2],\n  flute: [1, 3],\n  clarinet: [1, 3],\n  violin: [1, 3],\n  trumpet: [1, 3],\n  piccolo: [1, 2],\n};\n\nfunction setEnsemble() {\n  const ensembleInput = document.querySelector('.ensemble-select');\n  const selection = ensembleInput.value;\n\n  switch (selection) {\n    case 'chamber':\n      ensemble = {\n        cello: [2, 5],\n        horn: [2, 2],\n        violin: [1, 3],\n        clarinet: [1, 3],\n        flute: [1, 3],\n      };\n      break;\n    case 'brass':\n      ensemble = {\n        trombone: [1, 5],\n        horn: [2, 2],\n        trumpet: [1, 3],\n      };\n      break;\n    case 'woodwinds':\n      ensemble = {\n        bassoon: [1, 4],\n        flute: [1, 3],\n        clarinet: [1, 3],\n        piccolo: [1, 2],\n      };\n      break;\n    default:\n      ensemble = {\n        cello: [2, 5],\n        trombone: [1, 5],\n        bassoon: [1, 4],\n        horn: [2, 2],\n        flute: [1, 3],\n        clarinet: [1, 3],\n        violin: [1, 3],\n        trumpet: [1, 3],\n        piccolo: [1, 2],\n      };\n  }\n}\n\nfunction getEnsemble() {\n  return ensemble;\n}\n\nexport { setEnsemble, getEnsemble };\n","import boardFactory from './board';\nimport { humanPlayerFactory, computerPlayerFactory } from './player';\nimport { DOMBoardFactory } from './DOMBoard';\nimport {\n  showBoards,\n  setSetupPanelView,\n  setGamePanelView,\n  resetDOM,\n  updateFleet,\n  coverBoards,\n  coverFleets,\n  setPlayRoundView,\n  setBoardSizes,\n  showInfoButtons\n} from './DOMController';\nimport { rowLength } from './boardSize';\nimport { on, removeAllEvents } from './observer';\nimport { removeWindowEvents } from './imageGenerator';\nimport { setEnsemble } from './ensemble';\nimport { moveTrackerFactory } from './moveTracker';\n\nconst controlPanel = document.querySelector('.control-panel');\nconst startButton = document.querySelector('.start-game');\nconst setBoardButton = document.querySelector('.set-board');\nconst switchButton = document.querySelector('.switch-turns');\nconst startRoundButton = document.querySelector('.start-round');\nconst attackDirection = document.querySelector('.attack-direction');\nconst gameState = document.querySelector('.game-state');\n\nconst resetButton = document.querySelector('.reset');\nresetButton.addEventListener('click', reset);\n\nstartButton.addEventListener('click', beginSetup);\nswitchButton.addEventListener('click', coverBoards);\nswitchButton.addEventListener('click', coverFleets);\nstartRoundButton.addEventListener('click', playRound);\n\nconst moveTracker1 = moveTrackerFactory('moves1');\nconst moveTracker2 = moveTrackerFactory('moves2');\n\nconst autoSetupButton = document.querySelector('.random');\n\nlet player1;\nlet player2;\nlet currentPlayer;\n\nlet DOMBoard1;\nlet DOMBoard2;\n\nlet attackCount = 0;\nlet attackMax = 3;\nconst computerMoveTime = 700;\n\nfunction beginSetup() {\n  setEnsemble();\n  setSetupPanelView();\n  setBoardSizes();\n  attackMax = Number(document.getElementById('move-select').value);\n  const board1 = boardFactory('board1');\n  const board2 = boardFactory('board2');\n  DOMBoard1 = DOMBoardFactory('board1', rowLength());\n  DOMBoard2 = DOMBoardFactory('board2', rowLength());\n  player1 = humanPlayerFactory(board1, board2, DOMBoard1, DOMBoard2, moveTracker1);\n  player2 =\n    document.getElementById('opponent-select').value === 'computer'\n      ? computerPlayerFactory(board2, board1, DOMBoard2, moveTracker2)\n      : (player2 = humanPlayerFactory(board2, board1, DOMBoard2, DOMBoard1, moveTracker2));\n  player1.setup();\n  autoSetupButton.addEventListener('click', player1.autoSetup);\n  setBoardButton.addEventListener('click', finishSetup, { once: true });\n}\n\nfunction finishSetup() {\n  autoSetupButton.removeEventListener('click', player1.autoSetup);\n  player2.setup();\n  if (player2.isComputer()) {\n    startGame();\n  } else {\n    controlPanel.classList.add('two-player');\n    autoSetupButton.addEventListener('click', player2.autoSetup);\n    setBoardButton.addEventListener('click', startGame, { once: true });\n  }\n}\n\nfunction startGame() {\n  setGamePanelView();\n  showInfoButtons();\n  moveTracker1.reset(attackMax);\n  moveTracker2.reset(attackMax);\n  on('sunk', updateFleet);\n  on('attack', postAttackContinuation); // must be after 'attack' subscription from board.js; (computer attack does not emit this event)\n  DOMBoard1.listenForAttack();\n  DOMBoard2.listenForAttack();\n  currentPlayer = player1;\n  moveTracker1.show();\n  if (player2.isComputer()) {\n    playRound();\n    showBoards();\n  } else {\n    coverBoards();\n    setTimeout( () => {\n      showBoards();\n      currentPlayer.setTurn();\n    }, 2000 ) // wait for curtain to fully cover boards before changing setup-board to board1\n  }\n}\n\nfunction playRound() {\n  setPlayRoundView();\n  currentPlayer.setTurn();\n  if (currentPlayer.isComputer()) {\n    resetButton.disabled = true;\n    setTimeout(() => {\n      resetButton.disabled = false;\n    }, attackMax * computerMoveTime + 1500);\n    setTimeout(switchMoveTracker, 500);\n    setTimeout(computerAttacks, 1000);\n  } else {\n    switchMoveTracker();\n  }\n}\n\nfunction postAttackContinuation() {\n  // only runs after a player's attack, not the computer's\n  currentPlayer.incrementMoveCounter();\n  if (currentPlayer.sunkAllShips()) {\n    gameOver();\n    return;\n  }\n  attackCount++;\n  if (attackCount >= attackMax) {\n    attackCount = 0;\n    if (!player2.isComputer()) {\n      attackDirection.classList.add('opaque');\n    }\n    switchTurns();\n    finishRound();\n  }\n}\n\nfunction finishRound() {\n  if (player2.isComputer()) {\n    playRound();\n  } else {\n    DOMBoard1.disable();\n    DOMBoard2.disable();\n    switchButton.disabled = false;\n  }\n}\n\nfunction computerAttacks(i = 0) {\n  if (i >= attackMax) {\n    switchTurns();\n    setTimeout(() => playRound(), computerMoveTime);\n    return;\n  }\n\n  setTimeout(() => {\n    currentPlayer.attack();\n    if (currentPlayer.sunkAllShips()) {\n      gameOver();\n      return;\n    }\n    computerAttacks(i + 1);\n  }, computerMoveTime);\n}\n\nfunction switchTurns() {\n  currentPlayer = currentPlayer === player1 ? player2 : player1;\n}\n\nfunction switchMoveTracker() {\n  if (currentPlayer === player1) {\n    moveTracker1.show();\n    moveTracker2.hide();\n    attackDirection.classList.remove('player2');\n    if (player2.isComputer()) {\n      attackDirection.classList.remove('computer');\n    }\n  } else {\n    moveTracker1.hide();\n    moveTracker2.show();\n    attackDirection.classList.add('player2');\n    if (player2.isComputer()) {\n      attackDirection.classList.add('computer');\n    }\n  }\n}\n\nfunction gameOver() {\n  gameState.textContent = 'Wins!';\n  DOMBoard1.setGameOver();\n  DOMBoard2.setGameOver();\n}\n\nfunction reset() {\n  resetDOM();\n  removeAllEvents();\n  removeWindowEvents();\n  attackCount = 0;\n  DOMBoard1.unlistenForAttack();\n  DOMBoard2.unlistenForAttack();\n  setBoardButton.removeEventListener('click', finishSetup, { once: true });\n  setBoardButton.removeEventListener('click', startGame, { once: true });\n  autoSetupButton.removeEventListener('click', player1.autoSetup);\n  autoSetupButton.removeEventListener('click', player2.autoSetup);\n}\n","/* eslint-disable no-param-reassign */\nimport { resetRotationAdjustment } from \"./rotatable\";\n\nlet windowEvents = [];\n\nfunction flute() {\n  return newImage('flute', 1, 3);\n}\n\nfunction trombone() {\n  const image = newImage('trombone', 1, 5);\n  image.classList.add('stretch-trombone');\n  return image;\n}\n\nfunction clarinet() {\n  return newImage('clarinet', 1, 3);\n}\n\nfunction violin() {\n  const image = newImage('violin', 1, 3);\n  image.classList.add('stretch-violin');\n  return image;\n}\n\nfunction bassoon() {\n  return newImage('bassoon', 1, 4);\n}\n\nfunction cello() {\n  return newImage('cello', 2, 5);\n}\n\nfunction horn() {\n  return newImage('horn', 2, 2);\n}\n\nfunction piccolo() {\n  return newImage('piccolo', 1, 2);\n}\n\nfunction trumpet() {\n  return newImage('trumpet', 1, 3);\n}\n\nfunction newImage(type, width, height) {\n  const image = new Image();\n  image.src = `./images/${type}.png`;\n  image.spanX = width;\n  image.spanY = height;\n  image.area = width * height;\n  image.type = type;\n  setImageSize(image);\n  const boundResetImageSize = resetImageSize.bind(null, image);\n  window.addEventListener('resize', boundResetImageSize);\n  windowEvents.push(boundResetImageSize)\n  image.removeResizeListener = () => window.removeEventListener('resize', boundResetImageSize);\n  return image;\n}\n\nfunction setImageSize(image) {\n  const cell = document.querySelector('.board:not(.hidden) > .cell');\n  const squareWidth = cell.offsetWidth;\n  image.style.width = `${squareWidth * image.spanX}px`;\n  image.style.height = `${squareWidth * image.spanY}px`;\n}\n\nfunction resetImageSize(image) {\n  setImageSize(image);\n  resetRotationAdjustment(image);\n}\n\nfunction removeWindowEvents() {\n  windowEvents.forEach(event => {\n    window.removeEventListener('resize', event)\n  })\n  windowEvents = [];\n}\n\nexport { clarinet, flute, trombone, violin, bassoon, cello, horn, trumpet, piccolo, removeWindowEvents };\n","export function moveTrackerFactory(id) {\n  const tracker = document.getElementById(id);\n  tracker.moves = [];\n\n  let current = 0;\n\n  function hide() {\n    tracker.classList.add('hidden');\n  }\n\n  function show() {\n    tracker.classList.remove('hidden');\n    tracker.moves.forEach((move) => {\n      move.classList.remove('moved');\n    });\n    current = 0;\n  }\n\n  function reset(n) {\n    current = 0;\n    tracker.innerHTML = '';\n    tracker.moves = [];\n    for (let i = 0; i < n; i++) {\n      const move = document.createElement('span');\n      move.classList.add('move');\n      tracker.moves[i] = move;\n      tracker.appendChild(move);\n    }\n  }\n\n  function increment() {\n    tracker.moves[current].classList.add('moved');\n    current++;\n  }\n\n  return {\n    hide,\n    show,\n    reset,\n    increment,\n  };\n}\n","let events = {};\n\nfunction on(eventName, fn) {\n  events[eventName] ||= [];\n  events[eventName].push(fn);\n}\n\nfunction off(eventName, fn) {\n  if (!events[eventName]) return;\n\n  for (let i = 0; i < events[eventName].length; i++) {\n    if (events[eventName][i] === fn) {\n      events[eventName].splice(i, 1);\n      break;\n    }\n  }\n}\n\nfunction emit(eventName, data) {\n  if (!events[eventName]) return;\n\n  events[eventName].forEach((fn) => fn(data));\n}\n\nfunction removeAllEvents() {\n  events = {};\n}\n\nexport { on, off, emit, removeAllEvents };\n","import { rowLength } from './boardSize';\nimport { getEnsemble } from './ensemble';\n\nfunction humanPlayerFactory(homeBoard, opponentBoard, homeDOMBoard, opponentDOMBoard, moveCounter) {\n  const ships = getEnsemble();\n  function setup() {\n    homeDOMBoard.setupBoard();\n    homeBoard.listenForPosition();\n  }\n\n  function setTurn() {\n    opponentDOMBoard.setDefense();\n    opponentDOMBoard.enable();\n    homeDOMBoard.setOffense();\n  }\n\n  function autoSetup() {\n    homeBoard.resetSetup();\n    Object.entries(ships).forEach((ship) => {\n      const name = ship[0];\n      const dimensions = ship[1];\n      const set = homeBoard.findSets(...dimensions);\n      const coords = set[Math.floor(Math.random() * set.length)];\n      homeBoard.placeShip(coords, name);\n    });\n    homeDOMBoard.placeSetImages(homeBoard);\n    homeBoard.unlistenForPosition();\n    // ships have already been placed onto homeBoard — don't re-add them from DOMBoard\n  }\n\n  function isComputer() {\n    return false;\n  }\n\n  function sunkAllShips() {\n    return opponentBoard.allShipsSunk();\n  }\n\n  function incrementMoveCounter() {\n    moveCounter.increment();\n  }\n\n  return { isComputer, setup, autoSetup, setTurn, sunkAllShips, incrementMoveCounter };\n}\n\nfunction computerPlayerFactory(homeBoard, opponentBoard, homeDOMBoard, moveCounter) {\n  const ships = getEnsemble();\n  const size = rowLength();\n  const possibleMoves = [];\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      possibleMoves.push([i, j]);\n    }\n  }\n\n  function isComputer() {\n    return true;\n  }\n\n  function attack() {\n    if (possibleMoves.length === 0) throw new Error('there are no moves left');\n    const index = Math.floor(Math.random() * possibleMoves.length);\n    const move = possibleMoves[index];\n    possibleMoves[index] = possibleMoves[possibleMoves.length - 1];\n    possibleMoves.pop();\n    opponentBoard.receiveAttack({ id: opponentBoard.id, coords: move });\n    moveCounter.increment();\n  }\n\n  function setup() {\n    Object.entries(ships).forEach((ship) => {\n      const name = ship[0];\n      const dimensions = ship[1];\n      const set = homeBoard.findSets(...dimensions);\n      const coords = set[Math.floor(Math.random() * set.length)];\n      homeBoard.placeShip(coords, name);\n    });\n    homeDOMBoard.placeSetImages(homeBoard);\n  }\n\n  function setTurn() {\n    homeDOMBoard.disable();\n  }\n\n  function sunkAllShips() {\n    return opponentBoard.allShipsSunk();\n  }\n\n  return { attack, setup, isComputer, setTurn, sunkAllShips };\n}\n\nexport { humanPlayerFactory, computerPlayerFactory };\n","/* eslint-disable no-param-reassign */\nconst rotateButton = document.querySelector('.rotate');\nrotateButton.addEventListener('click', rotate);\n\nlet currentStagedImage;\n\nfunction rotate() {\n  if (!currentStagedImage) return;\n  const rotation = Number(currentStagedImage.style.transform.match(/\\d+(?=deg)/)) % 360;\n  currentStagedImage.style.transform = `rotate(${rotation + 90}deg)`;\n}\n\nfunction setStagedImage(current) {\n  currentStagedImage = current;\n}\n\nfunction adjustForRotation(draggedImage, newImage) {\n  const rotation = Number(draggedImage.style.transform.match(/\\d+(?=deg)/)) % 360;\n  if (!rotation) return;\n  switch (rotation) {\n    case 90:\n      newImage.style.transform = `translateX(${newImage.style.height}) rotate(${rotation}deg)`;\n      break;\n    case 180:\n      newImage.style.transform = `translateY(100%) translateX(100%) rotate(${rotation}deg)`;\n      break;\n    default: // 270\n      newImage.style.transform = `translateY(${newImage.style.width}) rotate(${rotation}deg)`;\n  }\n  if (rotation !== 180) {\n    [draggedImage.spanY, draggedImage.spanX] = [draggedImage.spanX, draggedImage.spanY];\n  }\n}\n\nfunction resetRotationAdjustment(image) {\n  const rotation = Number(image.style.transform.match(/\\d+(?=deg)/));\n  const { height, width } = image.style;\n  if (rotation === 90) {\n    image.style.transform = image.style.transform.replace(/\\d+px/, height); // replace translateX value\n  } else if (rotation === 270) {\n    image.style.transform = image.style.transform.replace(/\\d+px/, width); // replace translateY value\n  }\n}\n\nexport { rotate, setStagedImage, adjustForRotation, resetRotationAdjustment };\n","export default function shipFactory(length, name, coordinateSet) {\n  let hits = 0;\n  const coords = coordinateSet;\n  const hit = () => {\n    if (hits < length) {\n      hits++;\n    } else {\n      throw new Error('You already sank this ship!');\n    }\n  };\n  const isSunk = () => hits === length;\n  return { hit, isSunk, name, coords };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './gameflow';\n"],"names":[],"sourceRoot":""}