{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;AAAqE;AAClB;;AAEnD;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,UAAU,QAAQ;AAClB;AACA,cAAc,gEAAkB;AAChC;AACA;;AAEA;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEkD;;;;;;;;;;;;;;;;ACVlD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,UAAU;AAC5B,oBAAoB,UAAU;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW;AACX;;AAEqD;;;;;;;UCtErD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACyB","sources":["webpack://battleship/./src/DOMController.js","webpack://battleship/./src/coordinates.js","webpack://battleship/./src/player.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { humanPlayerFactory, computerPlayerFactory } from \"./player\";\nimport { indexToCoordinates } from \"./coordinates\";\n\nfunction createGrid(numberOfCells, board) {\n  board.cells = [];\n  for (let i = 0; i < numberOfCells; i++) {\n    board.cells[i] = document.createElement('div');\n    board.cells[i].classList.add('cell');\n    board.cells[i].dataset.index = i;\n    board.appendChild(board.cells[i]);\n  }\n}\n\nconst board1 = document.querySelector('#board1');\nconst board2 = document.querySelector('#board2');\n\ncreateGrid(100, board1);\ncreateGrid(100, board2);\n\n\nfunction listenForAttack(board) {\n  board.addEventListener('click', handleAttack);\n}\n\nfunction unListenForAttack(board) {\n  board.removeEventListener('click', handleAttack);\n}\n\nfunction handleAttack(e) {\n\n  const { index } = e.target.dataset;\n  if (!index) return;\n  console.log(indexToCoordinates(index));\n  \n}\n\nlistenForAttack(board1);","function indexToCoordinates(index) {\n  const x = index % 10;\n  const y = Math.floor(index / 10);\n  return [x, y];\n}\n\nfunction coordinatesToIndex(coords) {\n  return coords[1] * 10 + coords[0];\n}\n\nexport { indexToCoordinates, coordinatesToIndex };\n","function humanPlayerFactory(homeBoard, opponentBoard) {\n  function attack(coords) {\n    const coordinates = coords || getCoords();\n    opponentBoard.receiveAttack(coordinates);\n  }\n\n  function getCoords() {\n    // get coordinates from User/DOM\n  }\n\n  function placeShip(coords) {\n    homeBoard.placeShip(coords);\n  }\n\n  function placeAllShips() {\n    // while (remainingShips)\n      // get name and coordinates of ship from User/DOM\n      // placeShip\n  }\n\n  function isComputer() {\n    return false;\n  }\n\n  return { attack, placeShip, isComputer };\n}\n\nfunction computerPlayerFactory(homeBoard, opponentBoard) {\n  const ships = {\n    'Carrier': 5,\n    'Battleship': 4,\n    'Destroyer': 3,\n    'Submarine': 3,\n    'Patrol Boat': 2\n  }\n\n  const size = 10;\n  const possibleMoves = [];\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      possibleMoves.push([i, j]);\n    }\n  }\n\n  function isComputer() {\n    return true;\n  }\n\n  function attack() {\n    if (possibleMoves.length == 0) throw new Error('there are no moves left');\n    const index = Math.floor(Math.random() * possibleMoves.length);\n    const move = possibleMoves[index];\n    possibleMoves[index] = possibleMoves[possibleMoves.length - 1];\n    possibleMoves.pop();\n    opponentBoard.receiveAttack(move);\n  }\n\n  function placeAllShips() {\n    for (const ship in ships) {\n      const name = ship;\n      const length =  ships[ship];\n      const set = homeBoard.findSets(length);\n      const coords = set[Math.floor(Math.random() * set.length)];\n      homeBoard.placeShip(coords, name);\n    }\n  }\n\n  return { attack, placeAllShips, isComputer }\n}\n\nexport { humanPlayerFactory, computerPlayerFactory };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import './setup';\nimport './DOMController';\n"],"names":[],"sourceRoot":""}