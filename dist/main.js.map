{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAqE;AAClB;AACnB;AAChB;;AAEhB;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6CAAE;;AAEF;AACA;;AAEA;AACA,UAAU,YAAY;AACtB;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,UAAU,QAAQ;AAClB;AACA,cAAc,gEAAkB;AAChC;AACA;;AAEA;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEkD;;;;;;;;;;;;;;ACVA;AAChB;;AAElC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,4CAAa;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC,IAAI;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,+CAAI;AACN;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC9DA;;AAEA;AACA,qCAAqC;;AAErC,uBAAuB;AACvB,wBAAwB;;AAExB,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAA0B,gBAAgB;AAC1C;AACA;;AAE6C;;;;;;;;;;;;;;;;;AC1C7C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEyB;;;;;;;;;;;;;;;;ACxBzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,UAAU;AAC5B,oBAAoB,UAAU;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW;AACX;;AAEqD;;;;;;;UCtErD;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACyB","sources":["webpack://battleship/./src/DOMController.js","webpack://battleship/./src/coordinates.js","webpack://battleship/./src/drag.js","webpack://battleship/./src/imageGenerator.js","webpack://battleship/./src/observer.js","webpack://battleship/./src/player.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { humanPlayerFactory, computerPlayerFactory } from \"./player\";\nimport { indexToCoordinates } from \"./coordinates\";\nimport { on } from './observer';\nimport \"./drag\";\n\nfunction createGrid(numberOfCells, board) {\n  board.cells = [];\n  for (let i = 0; i < numberOfCells; i++) {\n    board.cells[i] = document.createElement('div');\n    board.cells[i].classList.add('cell');\n    board.cells[i].dataset.index = i;\n    board.appendChild(board.cells[i]);\n  }\n}\n\nconst board1 = document.querySelector('#board1');\n// const board2 = document.querySelector('#board2');\n\non('dragEvent', checkHover);\n\ncreateGrid(100, board1);\n// createGrid(100, board2);\n\nfunction checkHover(positionData) {\n  const { top, left } = positionData;\n  console.log(left, top);\n\n  const bound = board1.cells[0].getBoundingClientRect();\n  console.log(bound.left, bound.top);\n}\n\n\nfunction listenForAttack(board) {\n  board.addEventListener('click', handleAttack);\n}\n\nfunction unListenForAttack(board) {\n  board.removeEventListener('click', handleAttack);\n}\n\nfunction handleAttack(e) {\n\n  const { index } = e.target.dataset;\n  if (!index) return;\n  console.log(indexToCoordinates(index));\n  \n}\n\nlistenForAttack(board1);","function indexToCoordinates(index) {\n  const x = index % 10;\n  const y = Math.floor(index / 10);\n  return [x, y];\n}\n\nfunction coordinatesToIndex(coords) {\n  return coords[1] * 10 + coords[0];\n}\n\nexport { indexToCoordinates, coordinatesToIndex };\n","import * as draggedImages from './imageGenerator';\nimport { emit } from './observer';\n\nconst stagingArea = document.querySelector('.staging-area');\nconst previews = document.querySelectorAll('.img-preview');\n\nconst rotateButton = document.querySelector('.rotate');\n\npreviews.forEach((preview) => preview.addEventListener('click', showStagedImage));\nrotateButton.addEventListener('click', rotate);\n\nlet cursorOffsetX;\nlet cursurOffsetY;\nlet staged;\n\nfunction showStagedImage(e) {\n  const image = draggedImages[this.id]();\n  image.addEventListener('mousedown', dragStart);\n  stagingArea.appendChild(image);\n  staged = image;\n}\n\nfunction rotate() {\n  if (!staged) return;\n  const matchData = staged.style.transform.match(/\\d+/);\n  const deg = matchData ? Number(matchData[0]) + 90 : 90;\n  staged.style.transform = `rotate(${deg}deg)`;\n}\n\nfunction dragStart(e) {\n  e.preventDefault();\n  cursorOffsetX = e.clientX - this.offsetLeft;\n  cursurOffsetY = e.clientY - this.offsetTop;\n\n  const boundDragMove = dragMove.bind(this);\n  document.addEventListener('mousemove', boundDragMove);\n  document.addEventListener(\n    'mouseup',\n    () => {\n      document.removeEventListener('mousemove', boundDragMove);\n    },\n    { once: true }\n  );\n}\n\nfunction dragMove(e) {\n  console.log(this);\n  this.style.top = (e.clientY - cursurOffsetY).toString() + 'px';\n  this.style.left = (e.clientX - cursorOffsetX).toString() + 'px';\n  const positionData = {\n    top: this.offsetTop,\n    left: this.offsetLeft,\n    width: this.offsetWidth,\n    height: this.offsetHeight,\n  };\n\n  emit('dragEvent', positionData);\n}\n\nfunction dragEnd(e) {\n  document.removeEventListener('mousemove', dragMove.bind(this));\n  document.removeEventListener('mouseup', dragEnd);\n}\n","const board = document.querySelector('.board');\n\nconst boardWidth = 500;\nconst squareWidth = boardWidth / 10; // 50\n\nconst targetWidth = 3; // number of squares flute should occupy\nconst targetHeight = 1; // number of squares flute should occupy\n\n// flute width should be 150; height should be 50\n\nfunction flute() {\n  const image = new Image();\n  image.src = './images/flute.png';\n  image.classList.add('staging-img');\n  image.style.height = `${squareWidth * 3}px`;\n  return image;\n}\n\nfunction trombone() {\n  const image = new Image();\n  image.src = './images/trombone.png';\n  image.classList.add('staging-img');\n  image.style.height = `${squareWidth * 5}px`;\n  return image;\n}\n\nfunction clarinet() {\n  const image = new Image();\n  image.src = './images/clarinet.png';\n  image.classList.add('staging-img');\n  image.style.height = `${squareWidth * 3}px`;\n  return image;\n}\n\nfunction violin() {\n  const image = new Image();\n  image.src = './images/violin.png';\n  image.classList.add('staging-img');\n  image.style.height = `${squareWidth * 4}px`;\n  return image;\n}\n\nexport { clarinet, flute, trombone, violin };\n","const events = {};\n\nfunction on(eventName, fn) {\n  events[eventName] ||= [];\n  events[eventName].push(fn);\n}\n\nfunction off(eventName, fn) {\n  if (!events[eventName]) return;\n\n  for (let i = 0; i < events[eventName].length; i++) {\n    if (events[eventName][i] === fn) {\n      events[eventName].splice(i, 1);\n      break;\n    }\n  }\n}\n\nfunction emit(eventName, data) {\n  if (!events[eventName]) return;\n\n  events[eventName].forEach((fn) => fn(data));\n}\n\nexport { on, off, emit };\n","function humanPlayerFactory(homeBoard, opponentBoard) {\n  function attack(coords) {\n    const coordinates = coords || getCoords();\n    opponentBoard.receiveAttack(coordinates);\n  }\n\n  function getCoords() {\n    // get coordinates from User/DOM\n  }\n\n  function placeShip(coords) {\n    homeBoard.placeShip(coords);\n  }\n\n  function placeAllShips() {\n    // while (remainingShips)\n      // get name and coordinates of ship from User/DOM\n      // placeShip\n  }\n\n  function isComputer() {\n    return false;\n  }\n\n  return { attack, placeShip, isComputer };\n}\n\nfunction computerPlayerFactory(homeBoard, opponentBoard) {\n  const ships = {\n    'Carrier': 5,\n    'Battleship': 4,\n    'Destroyer': 3,\n    'Submarine': 3,\n    'Patrol Boat': 2\n  }\n\n  const size = 10;\n  const possibleMoves = [];\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      possibleMoves.push([i, j]);\n    }\n  }\n\n  function isComputer() {\n    return true;\n  }\n\n  function attack() {\n    if (possibleMoves.length == 0) throw new Error('there are no moves left');\n    const index = Math.floor(Math.random() * possibleMoves.length);\n    const move = possibleMoves[index];\n    possibleMoves[index] = possibleMoves[possibleMoves.length - 1];\n    possibleMoves.pop();\n    opponentBoard.receiveAttack(move);\n  }\n\n  function placeAllShips() {\n    for (const ship in ships) {\n      const name = ship;\n      const length =  ships[ship];\n      const set = homeBoard.findSets(length);\n      const coords = set[Math.floor(Math.random() * set.length)];\n      homeBoard.placeShip(coords, name);\n    }\n  }\n\n  return { attack, placeAllShips, isComputer }\n}\n\nexport { humanPlayerFactory, computerPlayerFactory };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import './setup';\nimport './DOMController';\n"],"names":[],"sourceRoot":""}