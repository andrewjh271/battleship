{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;AC9CtB;AACA;AACA,kBAAkB,yBAAyB;AAC3C;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,iCAAiC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEsB;;;;;;;;;;;;;;;AC7CtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,kCAAkC,qBAAqB,KAAK,GAAG;AAC/D;;AAEA;AACA;AACA,uBAAuB,WAAW;AAClC,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;;AAEuB;;;;;;;;;;;;;;;;;;;;AC7BvB;AAC0D;AAMjC;AACa;AACiC;AAC/B;;AAEjC;AACP,gBAAgB,uEAAkB;;AAElC,EAAE,6CAAE;;AAEJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,QAAQ;AACpB;AACA,IAAI,+CAAI,aAAa,QAAQ,gEAAkB,aAAa;AAC5D;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,qDAAS;AACvC;AACA,sDAAsD,iBAAiB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA,IAAI,6DAAa;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,gEAAgB;AACpC,2BAA2B,kEAAkB;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,uEAAuB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4CAA4C,mBAAmB;AAC/D;AACA,+BAA+B,UAAU,SAAS,QAAQ;AAC1D,kCAAkC,UAAU,SAAS,QAAQ;AAC7D;;AAEA;AACA;AACA,kBAAkB,gEAAkB;AACpC,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;AAC2C;AACF;AACD;AACW;AACC;;AAEpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA,kCAAkC,mBAAmB;AACrD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE,gEAAe;AACjB,EAAE,iEAAkB;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,EAAE,wDAAY;AACd,+CAA+C,UAAU;AACzD,4CAA4C,UAAU;AACtD,+CAA+C,UAAU;AACzD,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sDAAW;AAC3C;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,0BAA0B,wDAAW;AACrC;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,0BAA0B;AACvD;AACA;AACA;;AAEA;AACA;AACA;;AAkBE;;;;;;;;;;;;;;;ACnOF;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA,uCAAuC,0BAA0B,IAAI,gBAAgB;AACrF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAE8B;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BqB;AACA;AACJ;AACT;AACqB;AACK;AACvB;AACG;AACX;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,4DAA8B;AACxE,gDAAgD,4DAA8B;AAC9E,0CAA0C,6DAA+B;AACzE,gDAAgD,6DAA+B;;AAE/E;AACA;AACA;AACA;AACA,qCAAqC,sDAAW;AAChD;AACA;AACA,EAAE,yDAAS;AACX,iDAAiD,+CAAI,iCAAiC,YAAY;AAClG,EAAE,6CAAE;AACJ,EAAE,6CAAE;AACJ;;AAEA;AACA,EAAE,8DAAgC;AAClC,EAAE,4CAAc;AAChB;;AAEA;AACA,EAAE,4DAA8B;AAChC,EAAE,mDAAqB;AACvB;;AAEA;AACA,gBAAgB,4CAAc;AAC9B;AACA,sCAAsC,iDAAS;AAC/C,uCAAuC,iDAAS;AAChD;AACA;AACA,EAAE,0DAAc,SAAS;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA,EAAE,4DAA8B;AAChC,EAAE,6DAA+B;AACjC,qCAAqC,sDAAW;AAChD;AACA,EAAE,+CAAI;AACN;;AAEA;AACA;;AAEA;AACA,UAAU,mCAAmC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,4DAA8B;AAClC,IAAI,6DAA+B;AACnC;AACA;AACA;AACA,IAAI;AACJ,IAAI,6DAAiB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,6DAAiB;AACnB,kCAAkC,qDAAqD;AACvF;AACA,GAAG;AACH,qCAAqC,2CAA2C,SAAS,cAAc;;AAEvG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qCAAqC,WAAW;AAChD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,4CAAc;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,8CAAO;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEwF;;;;;;;;;;;;;;;;AC1OxD;;AAEhC;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,EAAE,6CAAE;AACJ,EAAE,6CAAE;AACJ,EAAE,6CAAE;AACJ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C,IAAI;AAC9C;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAE6B;;;;;;;;;;;;;;;;;ACnE7B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK;;AAE3C;AACA;;AAEA;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAE2D;;;;;;;;;;;;;;;;;;;;;;;;ACpH3D;AACiC;AACU;AACA;AACA;AACA;AACH;AACC;AACU;AACE;;AAEtC;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,GAAG,sDAAW;AACzC,0BAA0B,4DAAkB;AAC5C,kBAAkB,IAAI,qDAAS,IAAI;AACnC;AACA,oBAAoB,IAAI,qDAAS,IAAI;AACrC;AACA;AACA;;AAEA;AACA;AACA,4BAA4B;AAC5B,oBAAoB,IAAI,qDAAS,IAAI;AACrC,sBAAsB,IAAI,qDAAS,IAAI;AACvC,mCAAmC,mCAAmC;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI,6CAAE,mCAAmC;AACzC,IAAI,6CAAE,+BAA+B;AACrC;;AAEA;AACA,IAAI,8CAAG;AACP,IAAI,8CAAG;AACP,wCAAwC;;AAExC,kBAAkB,wDAAW;AAC7B;AACA;AACA,KAAK;AACL;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,kEAAkB;AAC1B;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oFAAoF,qDAAS;;AAE7F;AACA;AACA;;AAEA,oBAAoB,iDAAW;AAC/B;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,YAAY,SAAS;AACrB;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,6CAAE;;AAEJ;AACA;;AAEA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ,+CAAI;AACZ;AACA,MAAM;AACN,MAAM,+CAAI;AACV;AACA,IAAI,+CAAI,kBAAkB,aAAa;AACvC;;AAEA;AACA;AACA;AACA;AACA,IAAI,+CAAI,WAAW,4BAA4B;AAC/C;;AAEA,wBAAwB;AACxB;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,IAAI,qDAAS,IAAI;AACrC,sBAAsB,IAAI,qDAAS,IAAI;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,wDAAU;AACvB;AACA,WAAW,wDAAU;AACrB;;AAEA;AACA;AACA,oBAAoB,oBAAoB;AACxC,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;AC1PA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEmC;;;;;;;;;;;;;;;;;ACVK;;AAExC;AACA,eAAe,qDAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA,eAAe,qDAAS;AACxB;AACA;;AAEkD;;;;;;;;;;;;;;;;;ACdlD;AACkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,+CAAI;AACV,KAAK;AACL,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,+CAAI;AACV,KAAK;AACL,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAE,+CAAI;AACN;;AAEA;AACA;AACA;AACA;;AAEwC;;;;;;;;;;;;;;;;;;;;;ACzDxC;AACuE;AAC/B;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH,8CAA8C,gEAAkB;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,gBAAgB,gEAAkB;AAClC;AACA;AACA,GAAG,IAAI;AACP;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,iBAAiB,gEAAkB;AACnC,yDAAyD,qDAAS;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gEAAkB;AACtC;AACA,OAAO;AACP,GAAG;AACH;AACA;;AAEgF;;;;;;;;;;;;;;;;;ACrGhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEqD;;;;;;;;;;;;;;;;;;;;;;;;AC1FrD;AACmC;AACkC;AACxB;AAepB;AACe;AACe;AACD;AACb;AACU;AAClB;AAC2C;AACe;;AAE3F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uCAAuC,uDAAW;AAClD,uCAAuC,uDAAW;AAClD;;AAEA,qBAAqB,gEAAkB;AACvC,qBAAqB,gEAAkB;;AAEvC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB;;AAEnB;AACA,EAAE,sDAAW;AACb,EAAE,iEAAiB;AACnB,EAAE,6DAAa;AACf,EAAE,8CAAO;AACT;AACA,iBAAiB,kDAAY;AAC7B,iBAAiB,kDAAY;AAC7B,cAAc,0DAAe,WAAW,qDAAS;AACjD,cAAc,0DAAe,WAAW,qDAAS;AACjD,YAAY,2DAAkB;AAC9B;AACA;AACA,QAAQ,8DAAqB;AAC7B,mBAAmB,2DAAkB;AACrC;AACA;AACA;AACA,0DAA0D,YAAY;AACtE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,0DAA0D,YAAY;AACtE;AACA;;AAEA;AACA,EAAE,gEAAgB;AAClB,EAAE,+DAAe;AACjB;AACA;AACA,EAAE,6CAAE;AACJ,EAAE,6CAAE,SAAS,uDAAW;AACxB,EAAE,6CAAE,SAAS,6DAAiB;AAC9B,EAAE,6CAAE,SAAS,qDAAgB;AAC7B,EAAE,6CAAE,oCAAoC,sDAAsD;AAC9F,EAAE,6CAAE,cAAc,wDAAY;AAC9B,EAAE,6CAAE,cAAc,wDAAY;AAC9B,EAAE,iEAAqB;AACvB,EAAE,mDAAU;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0DAAU;AACd,IAAI;AACJ,IAAI,2DAAW;AACf;AACA,MAAM,0DAAU;AAChB;AACA,KAAK,SAAS;AACd;AACA;;AAEA;AACA,EAAE,gEAAgB;AAClB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE,+CAAI;AACN;AACA;AACA;;AAEA;AACA,EAAE,wDAAQ;AACV,EAAE,0DAAe;AACjB,EAAE,mEAAkB;AACpB;AACA;AACA;AACA,6DAA6D,YAAY;AACzE,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA,EAAE,kDAAS;AACX,EAAE,gEAAuB;AACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9OA;AACsD;;AAEtD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,KAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,0BAA0B;AACnD,0BAA0B,0BAA0B;AACpD;;AAEA;AACA;AACA,EAAE,mEAAuB;AACzB;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAuBE;;;;;;;;;;;;;;;;ACvIF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACTO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzCA;AAC0D;;AAE1D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;;AAED;AACA,0BAA0B,0DAAe,GAAG;AAC5C;;AAEA;AACA,4BAA4B,sDAAW;;AAEvC,yCAAyC,0DAAe;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2CAA2C,KAAK,GAAG,IAAI;AACvD;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,KAAK,GAAG,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,cAAc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAE4E;;;;;;;;;;;;;;;;;;ACtH5E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,8BAA8B;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAE0C;;;;;;;;;;;;;;;;;;;;;AC5BF;AACkB;AACkB;AACmB;AACpD;;AAE3C;AACA,gBAAgB,sDAAW;AAC3B,eAAe,qDAAS;AACxB,cAAc,0DAAe;;AAE7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,qEAAqB,CAAC,qDAAS;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAc;AAC1B;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY,iEAAqB;AACjC;AACA;AACA,UAAU;AACV;AACA;;AAEA,oBAAoB,wDAAU;AAC9B;AACA;AACA,OAAO;AACP;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW;AACX;;AAEA;AACA,UAAU,0BAA0B;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,2DAAkB;AAC1B,QAAQ,yDAAgB;;AAExB,iBAAiB,mDAAU;AAC3B,kCAAkC,oCAAoC;AACtE;AACA;;AAEA,WAAW;AACX;;AAEqD;;;;;;;;;;;;;;;;;;AC1IrD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sBAAsB,WAAW,SAAS;AACzF;AACA;AACA,6EAA6E,SAAS;AACtF;AACA;AACA,+CAA+C,qBAAqB,WAAW,SAAS;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU,gBAAgB;AAC1B;AACA,4EAA4E;AAC5E,IAAI;AACJ,2EAA2E;AAC3E;AACA;;AAE8E;;;;;;;;;;;;;;;AC5C/D;AACf;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,WAAW;AACX;;;;;;;;;;;;;;;;;;;;ACZ6C;AACL;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,0DAAe;;AAE3C;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA,oBAAoB,qDAAS;AAC7B;AACA,oBAAoB,qDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA,oBAAoB,qDAAS;AAC7B;AACA,oBAAoB,qDAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qDAAS,wCAAwC,qDAAS;AAClG;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,2BAA2B;AACjC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,0BAA0B;AAChC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,+BAA+B;AACrC,MAAM,gCAAgC;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,iCAAiC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,4BAA4B;AAClC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,0BAA0B;AAChC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,+BAA+B;AACrC,MAAM,6BAA6B;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,4BAA4B;AAClC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,6BAA6B;AACnC,MAAM,+BAA+B;AACrC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,+BAA+B;AACrC,MAAM,iCAAiC;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,6BAA6B;AACnC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,+BAA+B;AACrC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,8BAA8B;AACpC,MAAM,+BAA+B;AACrC,MAAM,6BAA6B;AACnC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,+BAA+B;AACrC,MAAM,+BAA+B;AACrC,MAAM,8BAA8B;AACpC,MAAM,mCAAmC;AACzC,MAAM,0BAA0B;AAChC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B,WAAW;AAC1C;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,mCAAmC,WAAW;AAC9C;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iDAAiD,KAAK;AACtD;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,CAAC;;AAwBC;;;;;;;;;;;;;;;ACxgBa;AACf,YAAY,OAAO,KAAK,gBAAgB,EAAE,YAAY;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACrBA;AACyC;AACE;;AAE5B;AACf;;AAEA;AACA,oBAAoB,iBAAiB;AACrC,cAAc,OAAO;AACrB,kCAAkC,sDAAW;AAC7C;AACA,kBAAkB,wDAAU;AAC5B;AACA;;AAEA;AACA,sDAAsD,KAAK;AAC3D,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCvFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNoB","sources":["webpack://battleship/./src/1DSetFinder.js","webpack://battleship/./src/2DSetFinder.js","webpack://battleship/./src/DOMAdapter.js","webpack://battleship/./src/DOMBoard.js","webpack://battleship/./src/DOMController.js","webpack://battleship/./src/DOMInitializeBoard.js","webpack://battleship/./src/DOMSetupBoard.js","webpack://battleship/./src/audioEffects.js","webpack://battleship/./src/audioSamples.js","webpack://battleship/./src/board.js","webpack://battleship/./src/boardSize.js","webpack://battleship/./src/coordinates.js","webpack://battleship/./src/draggable.js","webpack://battleship/./src/engine.js","webpack://battleship/./src/ensemble.js","webpack://battleship/./src/gameflow.js","webpack://battleship/./src/imageGenerator.js","webpack://battleship/./src/mode.js","webpack://battleship/./src/moveTracker.js","webpack://battleship/./src/music.js","webpack://battleship/./src/observer.js","webpack://battleship/./src/player.js","webpack://battleship/./src/rotatable.js","webpack://battleship/./src/ship.js","webpack://battleship/./src/shipPlacement.js","webpack://battleship/./src/statsPopulator.js","webpack://battleship/./src/sunkMessage.js","webpack://battleship/./src/unresolvedShips.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["function find1DSets(board, length, exclusionCondition) {\n  if (length === 1) return board.emptySquares();\n  const sets = [];\n  for (let i = 0; i < board.size; i++) {\n    const horizontal = [];\n    const vertical = [];\n    for (let j = 0; j < board.size; j++) {\n      horizontal.push([j, i]);\n      vertical.push([i, j]);\n    }\n    sets.push(\n      ...findSetsFromLine(horizontal, length, exclusionCondition),\n      ...findSetsFromLine(vertical, length, exclusionCondition),\n    );\n  }\n  if (sets.length === 0) throw new Error('No sets found with given parameters');\n  return sets;\n}\n\nfunction findSetsFromLine(line, length, exclusionCondition) {\n  let lft = 0;\n  let rt = 1;\n  const sets = [];\n\n  while (rt < line.length) {\n    if (exclusionCondition([line[lft]])) {\n      lft = rt;\n      rt += 1;\n    } else if (exclusionCondition([line[rt]])) {\n      lft = rt + 1;\n      rt += 2;\n    } else if (rt - lft + 1 === length) {\n      const set = [];\n      for (let j = lft; j <= rt; j++) {\n        set.push(line[j]);\n      }\n      sets.push(set);\n      lft++;\n      rt++;\n    } else {\n      rt++;\n    }\n  }\n  return sets;\n}\n\nexport { find1DSets };\n","function find2DSets(board, width, height, exclusionCondition) {\n  const sets = [];\n  for (let i = 0; i <= board.size - width; i++) {\n    const rows = [];\n    const columns = [];\n    for (let j = 0; j < board.size; j++) {\n      rows.push(createXComponent(j, i, width));\n      if (width !== height) columns.push(createYComponent(j, i, width));\n    }\n    sets.push(\n      ...findSetsFromComponents(rows, height, exclusionCondition),\n      ...findSetsFromComponents(columns, height, exclusionCondition) // empty array if width === height\n    );\n  }\n  if (sets.length === 0) throw new Error('No sets found with given parameters');\n  return sets;\n}\n\nfunction createXComponent(fixed, variable, length) {\n  const component = [];\n  for (let idx = 0; idx < length; idx++) {\n    component.push([variable + idx, fixed]);\n  }\n  return component;\n}\n\nfunction createYComponent(fixed, variable, length) {\n  const component = [];\n  for (let idx = 0; idx < length; idx++) {\n    component.push([fixed, variable + idx]);\n  }\n  return component;\n}\n\nfunction findSetsFromComponents(components, length, exclusionCondition) {\n  const sets = [];\n  for (let i = 0; i <= components.length - length; i++) {\n    const candidateSet = components.slice(i, i + length).flat();\n    if (!exclusionCondition(candidateSet)) {\n      sets.push(candidateSet);\n    }\n  }\n  return sets;\n}\n\nexport { find2DSets };\n","function getShipData(DOMboard) {\n  return Array.from(DOMboard.children)\n    .filter((element) => element.classList.contains('placed-img-wrapper'))\n    .map((element) => {\n      const [rowStart, colStart, rowSpan, colSpan] = element.style.gridArea\n        .match(/\\d+/g)\n        .map(Number);\n      const yStart = rowStart - 1;\n      const yEnd = yStart + rowSpan - 1;\n      const xStart = colStart - 1;\n      const xEnd = xStart + colSpan - 1;\n      const name = element.firstChild.type;\n      const object = {};\n      object[name] = getCoordinates(xStart, xEnd, yStart, yEnd);\n      return object;\n    })\n    .reduce((object, entry) => ({ ...object, ...entry }), {}); // converts array of objects into 1 object\n}\n\nfunction getCoordinates(xStart, xEnd, yStart, yEnd) {\n  const set = [];\n  for (let x = xStart; x <= xEnd; x++) {\n    for (let y = yStart; y <= yEnd; y++) {\n      set.push([x, y]);\n    }\n  }\n  return set;\n}\n\nexport { getShipData };\n","/* eslint-disable no-param-reassign */\nimport { initializeDOMBoard } from './DOMInitializeBoard';\nimport {\n  setupDOMBoard,\n  newTemplateImage,\n  newTemplateWrapper,\n  disableAllPreviewImages,\n} from './DOMSetupBoard';\nimport { on, emit } from './observer';\nimport { coordinatesToIndex, indexToCoordinates } from './coordinates';\nimport { rowLength } from './boardSize';\n\nexport function DOMBoardFactory(id, ROWS) {\n  const board = initializeDOMBoard(id, ROWS);\n\n  on('boardChange', updateBoard);\n\n  function listenForAttack() {\n    board.addEventListener('click', receiveAttack);\n  }\n\n  function unlistenForAttack() {\n    board.removeEventListener('click', receiveAttack);\n  }\n\n  function setOffense() {\n    board.classList.remove('defense');\n    board.classList.add('offense');\n  }\n\n  function setDefense() {\n    board.classList.remove('offense');\n    board.classList.add('defense');\n  }\n\n  function disable() {\n    board.classList.add('disabled');\n  }\n\n  function enable() {\n    board.classList.remove('disabled');\n  }\n\n  function setGameOver() {\n    board.classList.add('disabled');\n    board.classList.add('game-over');\n  }\n\n  function receiveAttack(e) {\n    const { index } = e.target.dataset;\n    if (!index) return;\n    emit('attack', { coords: indexToCoordinates(index), id });\n  }\n\n  function updateBoard(boardData) {\n    if (boardData.id !== id) return;\n\n    boardData.squares.forEach((row, i) => {\n      row.forEach((square, j) => {\n        const index = i + j * rowLength();\n        if (square.ship?.isSunk()) {\n          const img = board.querySelector(`img[src*=${square.ship.name}].placed-img`);\n          img.parentElement.classList.add('sunk');\n          board.cells[index].classList.add('sunk');\n        }\n        if (square.sunkInstrument) {\n          board.cells[index].classList.add('final-attack');\n        }\n        if (square.attacked) {\n          board.cells[index].classList.add('attacked');\n        }\n      });\n    });\n  }\n\n  function setupBoard() {\n    setupDOMBoard(board);\n  }\n\n  function clearBoard() {\n    const children = Array.from(board.children);\n    children.forEach((node) => {\n      if (node.classList.contains('permanent')) {\n        return;\n      }\n      if (node.classList.contains('cell')) {\n        node.classList.remove('highlight-placed');\n        return;\n      }\n      node.remove();\n    });\n  }\n\n  function placeSetImages(dataBoard) {\n    // places on DOMboard (board variable) all images from board object argument\n    clearBoard();\n    dataBoard.placedShips.forEach((ship) => {\n      const image = newTemplateImage(ship.name);\n      const imageWrapper = newTemplateWrapper();\n      setPosition(image, imageWrapper, ship.coords);\n      addPlacedClass(ship.coords);\n      imageWrapper.appendChild(image);\n      board.appendChild(imageWrapper);\n    });\n    disableAllPreviewImages();\n  }\n\n  function setPosition(image, wrapper, set) {\n    const rowStart = set.reduce((min, coord) => (coord[1] < min ? coord[1] : min), 100) + 1;\n    const rowSpan = set.reduce((max, coord) => (coord[1] > max ? coord[1] : max), -100) + 2 - rowStart;\n    const colStart = set.reduce((min, coord) => (coord[0] < min ? coord[0] : min), 100) + 1;\n    const colSpan = set.reduce((max, coord) => (coord[0] > max ? coord[0] : max), -100) + 2 - colStart;\n\n    if (\n      (colSpan > rowSpan && image.type !== 'glockenspiel') ||\n      (colSpan < rowSpan && image.type === 'glockenspiel')\n    ) {\n      image.style.transform = `translateX(${image.style.height}) rotate(90deg)`;\n    }\n    wrapper.style.gridRow = `${rowStart} / span ${rowSpan}`;\n    wrapper.style.gridColumn = `${colStart} / span ${colSpan}`;\n  }\n\n  function addPlacedClass(set) {\n    set.forEach((coords) => {\n      board.cells[coordinatesToIndex(coords)].classList.add('highlight-placed');\n    });\n  }\n\n  return {\n    setOffense,\n    setDefense,\n    setupBoard,\n    placeSetImages,\n    listenForAttack,\n    unlistenForAttack,\n    disable,\n    enable,\n    setGameOver,\n  };\n}\n","/* eslint-disable no-param-reassign */\nimport { setRowLength } from './boardSize';\nimport { getEnsemble } from './ensemble';\nimport sunkMessage from './sunkMessage';\nimport { resetStatsPanel } from './statsPopulator';\nimport { disableAudioButton } from './audioSamples';\n\nconst controlPanel = document.querySelector('.control-panel');\nconst startRoundButton = document.querySelector('.start-round');\nconst resetButton = document.querySelector('.reset');\nconst settingsButton = document.querySelector('.settings-toggle .gear');\nconst settingsPanel = document.querySelector('.settings-panel');\n\nconst setupContainer = document.querySelector('.board-setup-container');\nconst stagingArea = document.querySelector('.staging-area');\n\nconst board1 = document.querySelector('#board1');\nconst board2 = document.querySelector('#board2');\nconst fleetContainers = document.querySelectorAll('.remaining-fleet');\nconst fleet = document.querySelectorAll('.fleet');\nconst attackDirection = document.querySelector('.attack-direction');\nconst gameState = document.querySelector('.game-state');\n\nconst switchButton = document.querySelector('.switch-turns');\nconst curtains = document.querySelectorAll('.curtain');\nconst infoButtons = document.querySelectorAll('.info');\nconst intro = document.querySelector('.intro-text');\n\nconst moveTrackers = document.querySelectorAll('.moves');\n\nconst broadcast1 = board1.querySelector('.broadcast');\nconst broadcast2 = board2.querySelector('.broadcast');\n\nsettingsButton.addEventListener('click', () => {\n  settingsPanel.classList.toggle('open');\n})\n\nfunction setWindowHeight() {\n  document.body.style.height = `${window.innerHeight}px`;\n}\n\nsetWindowHeight();\nwindow.addEventListener('resize', setWindowHeight);\n\nfunction resetDOM() {\n  board1.classList.add('hidden');\n  board2.classList.add('hidden');\n  board1.classList.remove('defense');\n  board2.classList.remove('defense');\n  board1.classList.remove('offense');\n  board2.classList.remove('offense');\n  board1.classList.remove('game-over');\n  board2.classList.remove('game-over');\n  setupContainer.classList.add('hidden');\n  controlPanel.classList.remove('setup');\n  controlPanel.classList.remove('in-game');\n  controlPanel.classList.remove('two-player');\n  controlPanel.classList.add('preferences');\n  curtains.forEach((curtain) => curtain.classList.add('invisible'));\n  fleetContainers.forEach((container) => {\n    container.classList.add('invisible');\n    container.classList.add('opaque');\n    container.classList.remove('active');\n  });\n  fleet.forEach((instrument) => instrument.classList.remove('sunk'));\n  attackDirection.classList.add('invisible');\n  attackDirection.classList.remove('player2');\n  attackDirection.classList.remove('computer');\n  broadcast1.classList.remove('game-over');\n  broadcast2.classList.remove('game-over');\n  broadcast1.classList.remove('active');\n  broadcast2.classList.remove('active');\n  gameState.textContent = 'Attack!';\n  moveTrackers.forEach((tracker) => tracker.classList.add('invisible'));\n  infoButtons.forEach((button) => {\n    button.classList.add('hidden');\n    button.textContent = 'info';\n  });\n  stagingArea.innerHTML = '';\n  stagingArea.classList.remove('small-board');\n  resetButton.classList.remove('glow');\n  resetStatsPanel();\n  disableAudioButton();\n}\n\nfunction showSetup(board) {\n  setupContainer.classList.remove('hidden');\n  board.classList.remove('hidden');\n  if (board1 === board) {\n    board2.classList.add('hidden');\n  } else {\n    board1.classList.add('hidden');\n  }\n  const previews = document.querySelectorAll('.img-preview');\n  const whiteList = Object.keys(getEnsemble());\n  previews.forEach((preview) => {\n    if (whiteList.includes(preview.dataset.inst)) {\n      preview.classList.remove('hidden');\n    } else {\n      preview.classList.add('hidden');\n    }\n  });\n}\n\nfunction setBoardSizes() {\n  const rowLength = Number(document.querySelector('.size-select').value) || 10;\n  setRowLength(rowLength);\n  board1.style.gridTemplateColumns = `repeat(${rowLength}, 1fr)`;\n  board1.style.gridTemplateRows = `repeat(${rowLength}, 1fr)`;\n  board2.style.gridTemplateColumns = `repeat(${rowLength}, 1fr)`;\n  board2.style.gridTemplateRows = `repeat(${rowLength}, 1fr)`;\n  if (rowLength === 7) {\n    stagingArea.classList.add('small-board');\n  }\n}\n\nfunction showBoards() {\n  setupContainer.classList.add('hidden');\n  board1.classList.remove('hidden');\n  board2.classList.remove('hidden');\n  setTimeout(() => fleetContainers.forEach((container) => container.classList.remove('invisible')), 50);\n  const whiteList = Object.keys(getEnsemble());\n  fleet.forEach((instrument) => {\n    if (whiteList.includes(instrument.dataset.inst)) {\n      instrument.classList.remove('hidden');\n    } else {\n      instrument.classList.add('hidden');\n    }\n  });\n}\n\nfunction setPlayRoundView() {\n  curtains.forEach((curtain) => curtain.classList.add('invisible'));\n  uncoverFleets();\n  attackDirection.classList.remove('invisible');\n  attackDirection.classList.remove('opaque');\n  switchButton.disabled = true;\n  startRoundButton.disabled = true;\n}\n\nfunction updateFleet(data) {\n  const targetContainer = data.id === 'board1' ? board1 : board2;\n  const target = targetContainer.querySelector(`.${data.inst}`);\n  target.classList.add('sunk');\n}\n\nfunction coverBoards() {\n  curtains.forEach((curtain) => curtain.classList.remove('invisible'));\n  setTimeout(() => {\n    startRoundButton.disabled = false;\n  }, 2000);\n  switchButton.disabled = true;\n  moveTrackers.forEach((tracker) => tracker.classList.add('invisible'));\n  fleetContainers.forEach((container) => container.classList.remove('active'));\n  infoButtons.forEach((button) => {\n    button.textContent = 'info';\n  });\n}\n\nfunction coverFleets() {\n  fleetContainers.forEach((container) => container.classList.add('opaque'));\n}\n\nfunction uncoverFleets() {\n  fleetContainers.forEach((container) => container.classList.remove('opaque'));\n}\n\nfunction setSetupPanelView() {\n  intro.classList.add('hidden');\n  controlPanel.classList.remove('preferences');\n  controlPanel.classList.add('setup');\n}\n\nfunction setGamePanelView() {\n  controlPanel.classList.remove('setup');\n  controlPanel.classList.add('in-game');\n}\n\nfunction showInfoButtons() {\n  infoButtons.forEach((button) => button.classList.remove('hidden'));\n}\n\ninfoButtons.forEach((button) =>\n  button.addEventListener('click', () => {\n    const currentIcon = button.textContent;\n    button.textContent = currentIcon === 'info' ? 'cancel' : 'info';\n\n    const targetBoard = button.dataset.board === '1' ? board1 : board2;\n    const targetFleetContainer = targetBoard.querySelector('.remaining-fleet');\n    targetFleetContainer.classList.toggle('active');\n  })\n);\n\nfunction broadcastSunkShip(data) {\n  const broadcast = data.id === 'board1' ? broadcast1 : broadcast2;\n  broadcast.textContent = sunkMessage(broadcast.dataset.player, data.inst);\n  broadcast.classList.add('active');\n  setTimeout(() => broadcast.classList.remove('active'), 2000);\n}\n\nfunction broadcastWin(id) {\n  const broadcast = id === 1 ? broadcast1 : broadcast2;\n  broadcast.textContent = `${broadcast.dataset.player} Wins!`;\n  broadcast.classList.add('game-over');\n  broadcast.classList.add('active');\n}\n\nfunction addResetGlow() {\n  resetButton.classList.add('glow');\n}\n\nexport {\n  showBoards,\n  showSetup,\n  setBoardSizes,\n  setPlayRoundView,\n  setSetupPanelView,\n  setGamePanelView,\n  resetDOM,\n  coverBoards,\n  updateFleet,\n  coverFleets,\n  uncoverFleets,\n  showInfoButtons,\n  broadcastSunkShip,\n  broadcastWin,\n  addResetGlow\n};\n","/* eslint-disable no-param-reassign */\nfunction createGrid(rows, board) {\n  // HTML element remains after a reset; revert back to initial state\n  const children = Array.from(board.children);\n  children.forEach((node) => {\n    if (node.classList.contains('permanent')) {\n      return;\n    }\n    node.remove();\n  });\n\n  board.cells = [];\n  for (let i = 0; i < rows * rows; i++) {\n    board.cells[i] = document.createElement('div');\n    board.cells[i].classList.add('cell');\n    board.cells[i].style.gridArea = `${Math.floor(i / rows) + 1} / ${(i % rows) + 1} / span 1 / span 1`;\n    board.cells[i].dataset.index = i;\n    board.appendChild(board.cells[i]);\n  }\n}\n\nfunction initializeDOMBoard(id, rows) {\n  const board = document.getElementById(id);\n  board.numRows = rows;\n  createGrid(rows, board);\n  return board;\n}\n\nexport { initializeDOMBoard };\n","import * as imageGenerator from './imageGenerator';\nimport * as statsPopulator from './statsPopulator';\nimport * as audioSamples from './audioSamples';\nimport { on, emit } from './observer';\nimport { dragStart, resetDraggedImage } from './draggable';\nimport { setStagedImage, adjustForRotation } from './rotatable';\nimport { getEnsemble } from './ensemble';\nimport { showSetup } from './DOMController';\nimport { getMode } from './mode';\n\nconst stagingArea = document.querySelector('.staging-area');\nconst previewContainer = document.querySelector('.preview-container');\nconst previews = document.querySelectorAll('.img-preview');\nconst setBoardButton = document.querySelector('.set-board');\nconst clearButton = document.querySelector('.clear');\nconst autoSetupButtonSimple = document.querySelector('.random');\nconst autoSetupButton = document.querySelector('.random-enhanced');\n\npreviews.forEach((preview) => preview.addEventListener('click', showStagedImage));\npreviews.forEach((preview) => preview.addEventListener('click', activateStatsPanel));\npreviews.forEach((preview) => preview.addEventListener('click', activateAudioButton));\nclearButton.addEventListener('click', clearPlacedImages);\nautoSetupButton.addEventListener('click', removeStagedImage);\nautoSetupButtonSimple.addEventListener('click', removeStagedImage);\nautoSetupButton.addEventListener('click', statsPopulator.resetStatsPanel);\nautoSetupButtonSimple.addEventListener('click', statsPopulator.resetStatsPanel);\nautoSetupButton.addEventListener('click', audioSamples.disableAudioButton);\nautoSetupButtonSimple.addEventListener('click', audioSamples.disableAudioButton);\n\nlet remainingInstruments;\nlet currentBoard;\nfunction setupDOMBoard(board) {\n  setBoardButton.disabled = true;\n  remainingInstruments = Object.keys(getEnsemble());\n  enablePreviewImages();\n  currentBoard = board;\n  showSetup(currentBoard);\n  setBoardButton.addEventListener('click', () => emit('setPosition', currentBoard), { once: true });\n  on('dragEvent', highlightHoveredCells);\n  on('dragEnd', handleRelease);\n}\n\nfunction activateStatsPanel() {\n  statsPopulator.enableStatsButton();\n  statsPopulator[this.dataset.inst]();\n}\n\nfunction activateAudioButton() {\n  audioSamples.enableAudioButton();\n  audioSamples.setAudio(this.dataset.inst);\n}\n\nfunction showStagedImage() {\n  const image = imageGenerator[this.dataset.inst]();\n  image.classList.add('staging-img');\n  image.addEventListener('mousedown', dragStart);\n  image.addEventListener('touchstart', dragStart);\n  removeStagedImage();\n  stagingArea.appendChild(image);\n  setStagedImage(image); // for rotation\n}\n\nfunction removeStagedImage() {\n  if (stagingArea.firstChild) {\n    stagingArea.firstChild.removeResizeListener();\n    stagingArea.removeChild(stagingArea.firstChild);\n  }\n}\n\nfunction clearPlacedImages() {\n  const children = Array.from(currentBoard.children);\n  children.forEach((element) => {\n    if (element.classList.contains('placed-img-wrapper')) {\n      element.firstChild.removeResizeListener();\n      element.remove();\n    } else {\n      element.classList.remove('highlight-placed');\n    }\n  });\n  previews.forEach((preview) => preview.classList.remove('disabled'));\n  removeStagedImage();\n  statsPopulator.resetStatsPanel();\n  audioSamples.disableAudioButton();\n  remainingInstruments = Object.keys(getEnsemble());\n  setBoardButton.disabled = true;\n  emit('clearPosition');\n}\n\nlet cellsToHighlight = [];\nlet cellsToUnhighlight = [];\n\nfunction highlightHoveredCells(positionData) {\n  const { startX, endX, startY, endY, area } = positionData;\n\n  currentBoard.cells.forEach((cell) => {\n    const bound = cell.getBoundingClientRect();\n    const errorTolerance = isWithinBoard(startX, endX, startY, endY) ? 1 : -0.3;\n    const half = bound.width / 2 + errorTolerance;\n    // errorTolerance provides some leeway to pass comparisons (rounding errors, etc.);\n    // however, if the image is not fully within the board, comparisons need to be stricter to avoid\n    // highlighting a set of cells with the wrong dimensions (the check in commitValidHighlights\n    // is not helpful in this case because the size of the set could still be within the limit)\n\n    const maxLeft = bound.left + half;\n    const minRight = bound.right - half;\n    const maxTop = bound.top + half;\n    const minBottom = bound.bottom - half;\n\n    if (startX < maxLeft && endX > minRight && startY < maxTop && endY > minBottom) {\n      cellsToHighlight.push(cell);\n    } else {\n      cellsToUnhighlight.push(cell);\n    }\n  });\n  commitValidHighlights(area);\n  cellsToHighlight = [];\n  cellsToUnhighlight = [];\n}\n\nfunction commitValidHighlights(targetArea) {\n  // if too many cells are in cellsToHighlight because the image is straddling a border, do nothing.\n  // perform this check before filtering; otherwise a set of cells with the wrong dimensions could\n  // be incorrectly highlighted\n  if (cellsToHighlight.length > targetArea) {\n    return;\n  }\n  cellsToHighlight = cellsToHighlight.filter((cell) => !cell.classList.contains('highlight-placed'));\n  // if cellsToHighlight.length is less than targetArea, image is partially off board or partially over\n  // an already-placed image\n  if (cellsToHighlight.length < targetArea) {\n    cellsToHighlight.forEach((cell) => cell.classList.add('highlight-hovered-invalid'));\n    cellsToUnhighlight.forEach((cell) => cell.classList.remove('highlight-hovered-invalid'));\n    currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered'));\n  } else if (cellsToHighlight.length === targetArea) {\n    cellsToHighlight.forEach((cell) => cell.classList.add('highlight-hovered'));\n    cellsToUnhighlight.forEach((cell) => cell.classList.remove('highlight-hovered'));\n    currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered-invalid'));\n  }\n}\n\nfunction isWithinBoard(startX, endX, startY, endY) {\n  const bound = currentBoard.getBoundingClientRect();\n  return bound.left <= startX && bound.right >= endX && bound.top <= startY && bound.bottom >= endY;\n}\n\nfunction handleRelease(element) {\n  const validArea = currentBoard.cells.filter(\n    (cell) =>\n      cell.classList.contains('highlight-hovered') && !cell.classList.contains('highlight-placed')\n  ).length;\n  if (validArea === element.area) {\n    placeImage(element);\n    statsPopulator.resetStatsPanel();\n    audioSamples.disableAudioButton();\n    element.removeResizeListener();\n    element.remove();\n    updateHighlights();\n  } else {\n    resetDraggedImage(element);\n    removeDraggedHighlights();\n  }\n}\n\nfunction placeImage(element) {\n  const image = newTemplateImage(element.type);\n  const imageWrapper = newTemplateWrapper();\n  const startingCell = currentBoard.cells.findIndex((cell) =>\n    cell.classList.contains('highlight-hovered')\n  );\n\n  adjustForRotation(element, image);\n  imageWrapper.style.gridRow = `${Math.floor(startingCell / currentBoard.numRows) + 1} / span ${\n    element.spanY\n  }`;\n  imageWrapper.style.gridColumn = `${(startingCell % currentBoard.numRows) + 1} / span ${element.spanX}`;\n\n  imageWrapper.appendChild(image);\n  currentBoard.appendChild(imageWrapper);\n  disablePreviewImage(element.type);\n  updateRemainingInstruments(element.type);\n}\n\nfunction updateRemainingInstruments(instrument) {\n  const index = remainingInstruments.indexOf(instrument);\n  if (index > -1) {\n    remainingInstruments.splice(index, 1);\n  }\n  if (remainingInstruments.length === 0) {\n    setBoardButton.disabled = false;\n  }\n}\n\nfunction disablePreviewImage(instrument) {\n  previewContainer.querySelector(`.${instrument}`).classList.add('disabled');\n}\n\nfunction disableAllPreviewImages() {\n  previews.forEach((preview) => preview.classList.add('disabled'));\n  setBoardButton.disabled = false;\n}\n\nfunction enablePreviewImages() {\n  previews.forEach((preview) => preview.classList.remove('disabled'));\n}\n\nfunction newTemplateImage(type) {\n  const image = imageGenerator[type]();\n  image.classList.add('placed-img');\n  return image;\n}\n\nfunction newTemplateWrapper() {\n  const imageWrapper = document.createElement('div');\n  imageWrapper.classList.add('placed-img-wrapper');\n  if (getMode() === 'stealth') {\n    imageWrapper.classList.add('stealth');\n  }\n  return imageWrapper;\n}\n\nfunction removeDraggedHighlights() {\n  currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered'));\n  currentBoard.cells.forEach((cell) => cell.classList.remove('highlight-hovered-invalid'));\n}\n\nfunction updateHighlights() {\n  currentBoard.cells.forEach((cell) => {\n    if (cell.classList.contains('highlight-hovered')) {\n      cell.classList.remove('highlight-hovered');\n      cell.classList.add('highlight-placed');\n    }\n  });\n}\n\nexport { setupDOMBoard, newTemplateImage, newTemplateWrapper, disableAllPreviewImages };\n","import { on } from './observer';\n\nconst soundToggle = document.querySelector('input[name=\"sound-toggle\"]');\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n// Create a GainNode for volume control\nconst sfxGain = audioContext.createGain();\nsfxGain.gain.value = 0.7; // Default volume\nsfxGain.connect(audioContext.destination);\n\nconst audioFiles = {\n  hit: './audio/Sound Effects/hit.mp3',\n  miss: './audio/Sound Effects/miss.mp3',\n  explosion1: './audio/Sound Effects/explosion1.mp3',\n  explosion2: './audio/Sound Effects/explosion2.mp3',\n  explosion3: './audio/Sound Effects/explosion3.mp3',\n  explosion4: './audio/Sound Effects/explosion4.mp3',\n};\n\nconst audioBuffers = {};\n\nfunction subscribeToEvents() {\n  on('hit', playHit);\n  on('miss', playMiss);\n  on('sunk', playExplosion);\n}\n\nasync function loadAudioBuffer(name, url) {\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  audioBuffers[name] = await audioContext.decodeAudioData(arrayBuffer);\n}\n\n// Preload all sounds\nPromise.all(Object.entries(audioFiles).map(([name, url]) => loadAudioBuffer(name, url)));\n\nfunction playBuffer(buffer) {\n  if (!soundToggle.checked) return;\n  // iOS: resume context if needed\n  if (audioContext.state === 'suspended') audioContext.resume();\n  const source = audioContext.createBufferSource();\n  source.buffer = buffer;\n  source.connect(sfxGain); // Connect to gain node instead of destination\n  source.start(0);\n}\n\nfunction playHit() {\n  if (audioBuffers.hit) playBuffer(audioBuffers.hit);\n}\n\nfunction playMiss() {\n  if (audioBuffers.miss) playBuffer(audioBuffers.miss);\n}\n\nfunction playExplosion() {\n  const idx = Math.floor(Math.random() * 4) + 1;\n  const buffer = audioBuffers[`explosion${idx}`];\n  if (buffer) playBuffer(buffer);\n}\n\nconst sfxSlider = document.getElementById('sfx-volume');\nif (sfxSlider) {\n  sfxSlider.addEventListener('input', (e) => {\n    sfxGain.gain.value = parseFloat(e.target.value);\n  });\n}\n\nexport { subscribeToEvents };\n","let currentAudio;\nlet progressRAF;\nconst audioButton = document.querySelector('.inst-sample');\nconst audioButtonIcon = audioButton.querySelector('span');\nconst boardSetup = document.querySelector('.board-setup-container');\n\naudioButton.addEventListener('click', handleAudio);\n\nfunction disableAudioButton() {\n  if (!currentAudio || currentAudio.paused) {\n    audioButton.disabled = true;\n    audioButton.removeAttribute('data-inst');\n  } else {\n    currentAudio.addEventListener('ended', () => {\n      audioButton.disabled = true;\n      audioButton.removeAttribute('data-inst');\n    });\n  }\n}\n\nfunction enableAudioButton() {\n  audioButton.disabled = false;\n}\n\nfunction setAudio(inst) {\n  audioButton.setAttribute('data-inst', inst);\n}\n\nfunction handleAudio() {\n  if (audioButtonIcon.textContent === 'music_note') {\n    playAudio();\n  } else {\n    stopAudio();\n  }\n}\n\nfunction playAudio() {\n  if (currentAudio) {\n    currentAudio.pause();\n    currentAudio.currentTime = 0;\n  }\n  const inst = audioButton.getAttribute('data-inst');\n  if (!inst) {\n    console.warn('No instrument selected for audio playback.');\n    return;\n  }\n  currentAudio = new Audio(`./audio/${inst}.mp3`);\n\n  boardSetup.style.setProperty('--audio-progress', '0%');\n  boardSetup.style.setProperty('--audio-progress-opacity', '1');\n\n  function updateProgressBar() {\n    if (currentAudio.duration) {\n      const percent = (currentAudio.currentTime / currentAudio.duration) * 100;\n      boardSetup.style.setProperty('--audio-progress', `${percent}%`);\n    }\n    progressRAF = requestAnimationFrame(updateProgressBar);\n  }\n\n  progressRAF = requestAnimationFrame(updateProgressBar);\n\n  currentAudio.addEventListener('pause', () => {\n    cancelAnimationFrame(progressRAF);\n  });\n\n  currentAudio.addEventListener('ended', () => {\n    cancelAnimationFrame(progressRAF);\n    audioButtonIcon.textContent = 'music_note';\n    setTimeout(() => boardSetup.style.setProperty('--audio-progress-opacity', '0'), 800);\n    setTimeout(() => boardSetup.style.setProperty('--audio-progress', '0%'), 1200);\n  });\n\n  currentAudio.play().catch((error) => {\n    console.error('Error playing audio:', error);\n    boardSetup.style.setProperty('--audio-progress-opacity', '0');\n    boardSetup.style.setProperty('--audio-progress', '0%');\n  });\n  audioButtonIcon.textContent = 'stop_circle';\n}\n\nfunction stopAudio() {\n  if (currentAudio) {\n    boardSetup.style.setProperty('--audio-progress-opacity', '0');\n    boardSetup.style.setProperty('--audio-progress', '0%');\n    cancelAnimationFrame(progressRAF);\n\n    if (isIOS()) {\n      // iOS: skip fade b/c of volume property limitation; just pause and reset\n      currentAudio.pause();\n      currentAudio.currentTime = 0;\n      currentAudio.volume = 1.0;\n      audioButtonIcon.textContent = 'music_note';\n      return;\n    }\n\n    // Smoother fade out\n    const fadeStep = 0.008;\n    const fadeInterval = 1;\n    const fadeOut = setInterval(() => {\n      if (currentAudio.volume > fadeStep) {\n        currentAudio.volume = Math.max(0, currentAudio.volume - fadeStep);\n      } else {\n        clearInterval(fadeOut);\n        currentAudio.pause();\n        currentAudio.currentTime = 0;\n        currentAudio.volume = 1.0; // Reset for next play\n        audioButtonIcon.textContent = 'music_note';\n      }\n    }, fadeInterval);\n  }\n}\n\nfunction isIOS() {\n  return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n}\n\nexport { disableAudioButton, enableAudioButton, setAudio };\n","/* eslint-disable no-param-reassign */\nimport shipFactory from './ship';\nimport { find1DSets } from './1DSetFinder';\nimport { find2DSets } from './2DSetFinder';\nimport { getShipData } from './DOMAdapter';\nimport { on, off, emit } from './observer';\nimport { rowLength } from './boardSize';\nimport { getEnsemble } from './ensemble';\nimport unresolvedShipList from './unresolvedShips';\nimport { getAdjacentSquares } from './shipPlacement';\n\nexport default function boardFactory(id) {\n  let totalShips = 0;\n  let shipsSunk = 0;\n  let totalHits = 0;\n  let totalSunkHits = 0;\n  let maxSharedEdges = Infinity;\n  const placedShips = [];\n  const squares = [];\n  const remainingShips = { ...getEnsemble() };\n  const unresolvedShips = unresolvedShipList();\n  for (let i = 0; i < rowLength(); i++) {\n    squares[i] = [];\n    for (let j = 0; j < rowLength(); j++) {\n      squares[i][j] = {};\n    }\n  }\n\n  function resetSetup() {\n    totalShips = 0;\n    placedShips.length = 0; // reassigning placedShips to [] messes up reference\n    for (let i = 0; i < rowLength(); i++) {\n      for (let j = 0; j < rowLength(); j++) {\n        delete squares[i][j].ship; // reassigning squares[i][j] to {} similarly causes bugs\n      }\n    }\n  }\n\n  let boundSetPosition;\n  function listenForPosition() {\n    boundSetPosition = setPosition.bind(this);\n    on('setPosition', boundSetPosition); // board listens for setup onto the DOMBoard to be finalized\n    on('clearPosition', resetSetup); // autoSetup() relies on adding ships to the board object, not just the DOMBoard\n  }\n\n  function setPosition(DOMBoard) {\n    off('setPosition', boundSetPosition);\n    off('clearPosition', resetSetup);\n    if (placedShips.length > 0) return; // if there are placedShips, autoSetup() has been called and the data already exists in board object\n\n    const ships = getShipData(DOMBoard);\n    Object.entries(ships).forEach((ship) => {\n      this.placeShip(ship[1], ship[0]);\n    });\n  }\n\n  const isOccupied = (coordsSet) => {\n    for (let i = 0; i < coordsSet.length; i++) {\n      const coords = coordsSet[i];\n      if (squares[coords[0]][coords[1]].ship) return true;\n    }\n    return false;\n  };\n\n  const isAttacked = (coords) => squares[coords[0]][coords[1]].attacked;\n\n  const containsAttack = (coordsSet) => {\n    for (let i = 0; i < coordsSet.length; i++) {\n      const coords = coordsSet[i];\n      const square = squares[coords[0]][coords[1]];\n      if (square.attacked) return true;\n    }\n    return false;\n  };\n\n  const sharedEdgeCount = () => {\n    let count = 0;\n    placedShips.forEach((ship) => {\n      ship.coords.forEach((coordPair) => {\n        getAdjacentSquares(coordPair).forEach((adj) => {\n          if (squares[adj[0]][adj[1]].ship && squares[adj[0]][adj[1]].ship.name !== ship.name) {\n            count++;\n          }\n        });\n      });\n    });\n    return count / 2;\n  };\n\n  const willExceedMaxSharedEdges = (coordsSet) => {\n    placeShip(coordsSet, 'testPlacement');\n    const result = sharedEdgeCount() > maxSharedEdges;\n    unplaceLastShip();\n    return result;\n  };\n\n  const containsMissOrSunkSquare = (coordsSet) => {\n    for (let i = 0; i < coordsSet.length; i++) {\n      const coords = coordsSet[i];\n      const square = squares[coords[0]][coords[1]];\n      if ((square.attacked && !square.ship) || square.sunk) return true;\n      // the engine uses this function for finding moves, and while it should not necessarily know\n      // whether a square contains a ship, it does know about misses (i.e. an attacked square with\n      // no ship). it also does not necessarily know all squares that contain sunk ships, but can\n      // often deduce them by marking hit squares as sunk when there are no unresolved hits\n    }\n    return false;\n  };\n\n  const numAttacksInSet = (coordsSet) => {\n    let attacks = 0;\n    for (let i = 0; i < coordsSet.length; i++) {\n      const coords = coordsSet[i];\n      const square = squares[coords[0]][coords[1]];\n      if (square.attacked) attacks++;\n    }\n    return attacks;\n  };\n\n  const hasUnresolvedHits = () => totalHits > totalSunkHits;\n\n  const outOfRange = (coords) => coords.flat().some((coord) => coord < 0 || coord > rowLength() - 1);\n\n  function placeShip(coords, name) {\n    if (outOfRange(coords)) throw new Error('Ships cannot be placed off the board');\n    if (isOccupied(coords)) throw new Error('Ships cannot be on top of ships');\n\n    const newShip = shipFactory(coords.length, name, coords);\n    coords.forEach((coord) => {\n      squares[coord[0]][coord[1]].ship = newShip;\n    });\n    totalShips++;\n    placedShips.push(newShip);\n  }\n\n  function unplaceLastShip() {\n    const { coords } = placedShips.pop();\n    coords.forEach((coord) => {\n      delete squares[coord[0]][coord[1]].ship;\n    });\n    totalShips--;\n  }\n\n  function setMaxSharedEdges(n) {\n    maxSharedEdges = n;\n  }\n\n  on('attack', receiveAttack);\n\n  function receiveAttack(attackData) {\n    if (attackData.id !== id) return;\n\n    const { coords } = attackData;\n    const square = squares[coords[0]][coords[1]];\n    if (square.attacked) throw new Error('this square has already been attacked');\n    square.attacked = true;\n    if (square.ship) {\n      square.ship.hit();\n      totalHits++;\n      if (square.ship.isSunk()) {\n        handleSinkEvent(this, square);\n      } else {\n        emit('hit');\n      }\n    } else {\n      emit('miss');\n    }\n    emit('boardChange', { squares, id });\n  }\n\n  function handleSinkEvent(board, square) {\n    shipsSunk++;\n    totalSunkHits += square.ship.area;\n    delete remainingShips[square.ship.name];\n    emit('sunk', { id, inst: square.ship.name });\n    square.sunkInstrument = square.ship.name;\n\n    if (!board) return; // attack from DOM interaction to Observer — `this` in receieveAttack is undefined\n    // `this` is defined if called from computer — that's when marking squares is necessary for algorithm\n\n    if (hasUnresolvedHits()) {\n      square.sunk = true;\n      unresolvedShips.add(square.ship);\n      unresolvedShips.resolve(board);\n    } else {\n      unresolvedShips.clear();\n      markSunkSquares();\n    }\n  }\n\n  function markSunkSquares() {\n    for (let i = 0; i < rowLength(); i++) {\n      for (let j = 0; j < rowLength(); j++) {\n        if (squares[i][j].attacked) {\n          squares[i][j].sunk = true;\n        }\n      }\n    }\n  }\n\n  function allShipsSunk() {\n    return totalShips === shipsSunk;\n  }\n\n  // find1DSets is a faster algorithm for finding sets with width or length equal to 1\n  function findSets(conditionFunction, x, y) {\n    if (x === 1 || y === 1) {\n      const length = x === 1 ? y : x;\n      return find1DSets(this, length, conditionFunction);\n    }\n    return find2DSets(this, x, y, conditionFunction);\n  }\n\n  function emptySquares() {\n    const set = [];\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares.length; j++) {\n        if (!squares[i][j].ship) {\n          set.push([i, j]);\n        }\n      }\n    }\n    return set;\n  }\n\n  return {\n    findSets,\n    isOccupied,\n    containsMissOrSunkSquare,\n    containsAttack,\n    isAttacked,\n    numAttacksInSet,\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    emptySquares,\n    listenForPosition,\n    resetSetup,\n    hasUnresolvedHits,\n    sharedEdgeCount,\n    setMaxSharedEdges,\n    willExceedMaxSharedEdges,\n    remainingShips,\n    placedShips,\n    squares,\n    id,\n    get size() {\n      return squares.length;\n    },\n  };\n}\n","let rows = 10;\n\nfunction rowLength() {\n  return rows;\n}\n\nfunction setRowLength(x) {\n  rows = x;\n}\n\nexport { rowLength, setRowLength };\n","import { rowLength } from './boardSize';\n\nfunction indexToCoordinates(index) {\n  const size = rowLength();\n  const x = index % size;\n  const y = Math.floor(index / size);\n  return [x, y];\n}\n\nfunction coordinatesToIndex(coords) {\n  const size = rowLength();\n  return coords[1] * size + coords[0];\n}\n\nexport { indexToCoordinates, coordinatesToIndex };\n","/* eslint-disable no-param-reassign */\nimport { emit } from './observer';\n\nlet cursorOffsetX;\nlet cursurOffsetY;\n\nfunction dragStart(e) {\n  e.preventDefault();\n  cursorOffsetX = (e.clientX || e.touches[0].screenX) - this.offsetLeft;\n  cursurOffsetY = (e.clientY || e.touches[0].screenY) - this.offsetTop;\n  this.classList.add('grabbing');\n\n  const boundDragMove = dragMove.bind(this);\n\n  document.addEventListener('mousemove', boundDragMove);\n  document.addEventListener(\n    'mouseup',\n    () => {\n      document.removeEventListener('mousemove', boundDragMove);\n      this.classList.remove('grabbing');\n      emit('dragEnd', this);\n    },\n    { once: true }\n  );\n\n  document.addEventListener('touchmove', boundDragMove);\n  document.addEventListener(\n    'touchend',\n    () => {\n      document.removeEventListener('touchmove', boundDragMove);\n      this.classList.remove('grabbing');\n      emit('dragEnd', this);\n    },\n    { once: true }\n  );\n}\n\nfunction dragMove(e) {\n  this.style.top = ((e.clientY || e.touches[0].screenY) - cursurOffsetY).toString() + 'px';\n  this.style.left = ((e.clientX || e.touches[0].screenX) - cursorOffsetX).toString() + 'px';\n  const bound = this.getBoundingClientRect();\n  const positionData = {\n    startX: bound.left,\n    endX: bound.right,\n    startY: bound.top,\n    endY: bound.bottom,\n    area: this.area,\n  };\n\n  emit('dragEvent', positionData);\n}\n\nfunction resetDraggedImage(element) {\n  element.style.top = '';\n  element.style.left = '';\n}\n\nexport { dragStart, resetDraggedImage };\n","/* eslint-disable no-param-reassign */\nimport { coordinatesToIndex, indexToCoordinates } from './coordinates';\nimport { rowLength } from './boardSize';\n\nfunction selectMove(distribution) {\n  const keys = Object.keys(distribution);\n  if (keys.length === 0) throw new Error('Distribution object is empty');\n  let max = -Infinity;\n  let candidateMoves = [];\n\n  keys.forEach((key) => {\n    if (distribution[key] > max) {\n      candidateMoves = [key];\n      max = distribution[key];\n    } else if (distribution[key] === max) {\n      candidateMoves.push(key);\n    }\n  });\n\n  candidateMoves = candidateMoves.map((el) => indexToCoordinates(Number(el)));\n  const index = Math.floor(Math.random() * candidateMoves.length);\n  const move = candidateMoves[index];\n  return move;\n}\n\nfunction huntDistribution(board, unweighted) {\n  if (Object.keys(board.remainingShips).length === 0)\n    throw new Error('There are no remaining ships to test');\n  const sets = [];\n  Object.entries(board.remainingShips).forEach((ship) => {\n    const dimensions = ship[1];\n    const set = board.findSets(board.containsAttack, ...dimensions);\n    sets.push(...set);\n  });\n  const distribution = sets.flat().reduce((freq, coords) => {\n    const key = coordinatesToIndex(coords);\n    freq[key] = (freq[key] || 0) + 1;\n    return freq;\n  }, {});\n  return unweighted ? distribution : weightEdges(distribution);\n}\n\nfunction weightEdges(distribution) {\n  const keys = Object.keys(distribution);\n  if (keys.length === 0) throw new Error('Distribution object is empty');\n\n  const avg = getAverage(distribution);\n  const weight = Math.floor(Math.random() * avg * 1.5);\n  const weightedDistribution = {};\n\n  keys.forEach((key) => {\n    weightedDistribution[key] = distribution[key] + (isEdge(key) ? weight : 0);\n  });\n  return weightedDistribution;\n}\n\nfunction getAverage(distribution) {\n  const keys = Object.keys(distribution);\n  let total = 0;\n  keys.forEach((key) => {\n    total += distribution[key];\n  });\n  return total / keys.length;\n}\n\nfunction isEdge(index) {\n  const coords = indexToCoordinates(index);\n  return coords.some((coord) => coord === 0 || coord === rowLength() - 1);\n}\n\nfunction targetDistribution(board) {\n  if (Object.keys(board.remainingShips).length === 0)\n    throw new Error('There are no remaining ships to test');\n  const sets = [];\n  Object.entries(board.remainingShips).forEach((ship) => {\n    const dimensions = ship[1];\n    const set = board.findSets(board.containsMissOrSunkSquare, ...dimensions);\n    sets.push(...set);\n  });\n  const distribution = {};\n  sets.forEach((set) => {\n    const n = board.numAttacksInSet(set);\n    const weightedScore = 15 ** n;\n\n    // 15 possible placements containing 1 hit square would be necessary to equal in weight 1 possible\n    // placement containing 2 hit squares, and so on.\n    // Designed to prioritize squares that could complete sets with the highest number of hit squares.\n    // It is not clear that this offers any improvement against random placement, but against\n    // human players it should. Against humans it is more likely that hit squares which could be part of\n    // a large ship are, in fact, part of that ship because a human player is less likely to place ships\n    // in clusters.\n    set\n      .filter((coords) => !board.isAttacked(coords))\n      .forEach((coords) => {\n        const key = coordinatesToIndex(coords);\n        distribution[key] = (distribution[key] || 0) + 1 + weightedScore;\n      });\n  });\n  return distribution;\n}\n\nexport { selectMove, huntDistribution, targetDistribution, getAverage, isEdge };\n","let ensemble = {\n  cello: [2, 5],\n  trombone: [1, 5],\n  bassoon: [1, 4],\n  horn: [2, 2],\n  flute: [1, 3],\n  clarinet: [1, 3],\n  violin: [1, 3],\n  trumpet: [1, 3],\n  piccolo: [1, 2],\n};\n\nlet selection = 'orchestra';\n\nfunction setEnsemble() {\n  const ensembleInput = document.querySelector('.ensemble-select');\n  selection = ensembleInput.value;\n\n  switch (selection) {\n    case 'chamber':\n      ensemble = {\n        cello: [2, 5],\n        horn: [2, 2],\n        violin: [1, 3],\n        clarinet: [1, 3],\n        flute: [1, 3],\n      };\n      break;\n    case 'brass':\n      ensemble = {\n        tuba: [2, 3],\n        trombone: [1, 5],\n        horn: [2, 2],\n        trumpet: [1, 3],\n      };\n      break;\n    case 'woodwinds':\n      ensemble = {\n        bassoon: [1, 4],\n        flute: [1, 3],\n        clarinet: [1, 3],\n        oboe: [1, 3],\n        piccolo: [1, 2],\n      };\n      break;\n    case 'strings':\n      ensemble = {\n        bass: [3, 6],\n        cello: [2, 5],\n        viola: [1, 3],\n        violin: [1, 3]\n      };\n      break;\n    case 'harp':\n      ensemble = {\n        harp: [3, 6]\n      };\n      break;\n    case 'percussion':\n      ensemble = {\n        bassdrum: [3, 4],\n        glockenspiel: [3, 2],\n        cymbals: [2, 2],\n        snare: [2, 2],\n        cabasa: [2, 1],\n      };\n      break;\n    default:\n      ensemble = {\n        cello: [2, 5],\n        trombone: [1, 5],\n        bassoon: [1, 4],\n        horn: [2, 2],\n        flute: [1, 3],\n        clarinet: [1, 3],\n        violin: [1, 3],\n        trumpet: [1, 3],\n        piccolo: [1, 2],\n      };\n  }\n}\n\nfunction getEnsemble() {\n  return ensemble;\n}\n\nfunction getEnsembleName() {\n  return selection;\n}\n\nexport { setEnsemble, getEnsemble, getEnsembleName };\n","/* eslint-disable no-return-assign */\nimport boardFactory from './board';\nimport { humanPlayerFactory, computerPlayerFactory } from './player';\nimport { DOMBoardFactory } from './DOMBoard';\nimport {\n  showBoards,\n  setSetupPanelView,\n  setGamePanelView,\n  resetDOM,\n  updateFleet,\n  coverBoards,\n  coverFleets,\n  setPlayRoundView,\n  setBoardSizes,\n  showInfoButtons,\n  broadcastSunkShip,\n  broadcastWin,\n  addResetGlow,\n} from './DOMController';\nimport { rowLength } from './boardSize';\nimport { on, emit, removeAllEvents } from './observer';\nimport { removeWindowEvents } from './imageGenerator';\nimport { setEnsemble } from './ensemble';\nimport { moveTrackerFactory } from './moveTracker';\nimport { setMode } from './mode';\nimport { subscribeToEvents as setupSfxSubscriptions } from './audioEffects';\nimport { startMusic, stopMusic, removeInstrument, resetRemovedInstruments } from './music';\n\nconst controlPanel = document.querySelector('.control-panel');\nconst startButton = document.querySelector('.start-game');\nconst setBoardButton = document.querySelector('.set-board');\nconst switchButton = document.querySelector('.switch-turns');\nconst startRoundButton = document.querySelector('.start-round');\nconst attackDirection = document.querySelector('.attack-direction');\nconst gameState = document.querySelector('.game-state');\n\nconst resetButton = document.querySelector('.reset');\nresetButton.addEventListener('click', reset);\n\nstartButton.addEventListener('click', beginSetup);\nswitchButton.addEventListener('click', coverBoards);\nswitchButton.addEventListener('click', coverFleets);\nstartRoundButton.addEventListener('click', playRound);\n\nconst moveTracker1 = moveTrackerFactory('moves1');\nconst moveTracker2 = moveTrackerFactory('moves2');\n\nconst autoSetupButtonSimple = document.querySelector('.random');\nconst autoSetupButton = document.querySelector('.random-enhanced');\n\nlet player1;\nlet player2;\nlet currentPlayer;\n\nlet DOMBoard1;\nlet DOMBoard2;\n\nlet attackCount = 0;\nlet attackMax = 3;\nconst computerMoveTime = 700;\n\nlet sinkDelay = 0; // delay computer start if last move sank a ship\n\nfunction beginSetup() {\n  setEnsemble();\n  setSetupPanelView();\n  setBoardSizes();\n  setMode();\n  attackMax = Number(document.getElementById('move-select').value);\n  const board1 = boardFactory('board1');\n  const board2 = boardFactory('board2');\n  DOMBoard1 = DOMBoardFactory('board1', rowLength());\n  DOMBoard2 = DOMBoardFactory('board2', rowLength());\n  player1 = humanPlayerFactory(board1, board2, DOMBoard1, DOMBoard2, moveTracker1);\n  player2 =\n    document.getElementById('opponent-select').value === 'computer'\n      ? computerPlayerFactory(board2, board1, DOMBoard2, moveTracker2)\n      : (player2 = humanPlayerFactory(board2, board1, DOMBoard2, DOMBoard1, moveTracker2));\n  player1.setup();\n  autoSetupButtonSimple.addEventListener('click', player1.autoSetupSimple);\n  autoSetupButton.addEventListener('click', player1.autoSetup);\n  setBoardButton.addEventListener('click', finishSetup, { once: true });\n}\n\nfunction finishSetup() {\n  autoSetupButtonSimple.removeEventListener('click', player1.autoSetupSimple);\n  autoSetupButton.removeEventListener('click', player1.autoSetup);\n  player2.setup();\n  if (player2.isComputer()) {\n    startGame();\n  } else {\n    controlPanel.classList.add('two-player');\n    autoSetupButtonSimple.addEventListener('click', player2.autoSetupSimple);\n    autoSetupButton.addEventListener('click', player2.autoSetup);\n    setBoardButton.addEventListener('click', startGame, { once: true });\n  }\n}\n\nfunction startGame() {\n  setGamePanelView();\n  showInfoButtons();\n  moveTracker1.reset(attackMax);\n  moveTracker2.reset(attackMax);\n  on('sunk', setSinkDelay);\n  on('sunk', updateFleet);\n  on('sunk', broadcastSunkShip);\n  on('sunk', removeInstrument);\n  on('attack', postAttackContinuation); // must be after 'attack' subscription from board.js; (computer attack does not emit this event)\n  on('game-over', broadcastWin);\n  on('game-over', addResetGlow);\n  setupSfxSubscriptions();\n  startMusic();\n  DOMBoard1.listenForAttack();\n  DOMBoard2.listenForAttack();\n  currentPlayer = player1;\n  moveTracker1.show();\n  if (player2.isComputer()) {\n    playRound();\n    showBoards();\n  } else {\n    coverBoards();\n    setTimeout(() => {\n      showBoards();\n      currentPlayer.setTurn();\n    }, 2000); // wait for curtain to fully cover boards before changing setup-board to board1\n  }\n}\n\nfunction playRound() {\n  setPlayRoundView();\n  currentPlayer.setTurn();\n  if (currentPlayer.isComputer()) {\n    resetButton.disabled = true;\n    setTimeout(() => {\n      resetButton.disabled = false;\n    }, attackMax * computerMoveTime + 1800 + sinkDelay);\n    setTimeout(switchMoveTracker, 500);\n    setTimeout(computerAttacks, 1000 + sinkDelay);\n  } else {\n    switchMoveTracker();\n  }\n}\n\nfunction postAttackContinuation() {\n  // only runs after a player's attack, not the computer's\n  currentPlayer.incrementMoveCounter();\n  if (currentPlayer.sunkAllShips()) {\n    gameOver();\n    return;\n  }\n  attackCount++;\n  if (attackCount >= attackMax) {\n    attackCount = 0;\n    if (!player2.isComputer()) {\n      attackDirection.classList.add('opaque');\n    }\n    switchTurns();\n    finishRound();\n  }\n}\n\nfunction finishRound() {\n  if (player2.isComputer()) {\n    playRound();\n  } else {\n    DOMBoard1.disable();\n    DOMBoard2.disable();\n    switchButton.disabled = false;\n  }\n}\n\nfunction computerAttacks(i = 0) {\n  if (i >= attackMax) {\n    switchTurns();\n    setTimeout(() => playRound(), computerMoveTime);\n    return;\n  }\n\n  setTimeout(() => {\n    currentPlayer.attack();\n    if (currentPlayer.sunkAllShips()) {\n      gameOver();\n      return;\n    }\n    computerAttacks(i + 1);\n  }, computerMoveTime);\n}\n\nfunction switchTurns() {\n  currentPlayer = currentPlayer === player1 ? player2 : player1;\n}\n\nfunction switchMoveTracker() {\n  if (currentPlayer === player1) {\n    moveTracker1.show();\n    moveTracker2.hide();\n    attackDirection.classList.remove('player2');\n    if (player2.isComputer()) {\n      attackDirection.classList.remove('computer');\n    }\n  } else {\n    moveTracker1.hide();\n    moveTracker2.show();\n    attackDirection.classList.add('player2');\n    if (player2.isComputer()) {\n      attackDirection.classList.add('computer');\n    }\n  }\n}\n\nfunction setSinkDelay() {\n  sinkDelay = 700;\n  setTimeout(() => (sinkDelay = 0), 1000);\n}\n\nfunction gameOver() {\n  gameState.textContent = 'Wins!';\n  const playerID = currentPlayer === player1 ? 1 : 2;\n  emit('game-over', playerID);\n  DOMBoard1.setGameOver();\n  DOMBoard2.setGameOver();\n}\n\nfunction reset() {\n  resetDOM();\n  removeAllEvents();\n  removeWindowEvents();\n  attackCount = 0;\n  DOMBoard1.unlistenForAttack();\n  DOMBoard2.unlistenForAttack();\n  setBoardButton.removeEventListener('click', finishSetup, { once: true });\n  setBoardButton.removeEventListener('click', startGame, { once: true });\n  autoSetupButtonSimple.removeEventListener('click', player1.autoSetupSimple);\n  autoSetupButton.removeEventListener('click', player1.autoSetup);\n  autoSetupButtonSimple.removeEventListener('click', player2.autoSetupSimple);\n  autoSetupButton.removeEventListener('click', player2.autoSetup);\n  stopMusic();\n  resetRemovedInstruments();\n}\n","/* eslint-disable no-param-reassign */\nimport { resetRotationAdjustment } from './rotatable';\n\nlet windowEvents = [];\n\nfunction flute() {\n  return newImage('flute', 1, 3);\n}\n\nfunction trombone() {\n  const image = newImage('trombone', 1, 5);\n  image.classList.add('stretch-trombone');\n  return image;\n}\n\nfunction clarinet() {\n  return newImage('clarinet', 1, 3);\n}\n\nfunction violin() {\n  const image = newImage('violin', 1, 3);\n  image.classList.add('stretch-violin');\n  return image;\n}\n\nfunction bassoon() {\n  return newImage('bassoon', 1, 4);\n}\n\nfunction cello() {\n  return newImage('cello', 2, 5);\n}\n\nfunction horn() {\n  return newImage('horn', 2, 2);\n}\n\nfunction piccolo() {\n  return newImage('piccolo', 1, 2);\n}\n\nfunction trumpet() {\n  const image = newImage('trumpet', 1, 3);\n  image.classList.add('stretch-trumpet');\n  return image;\n}\n\nfunction bass() {\n  return newImage('bass', 3, 6);\n}\nfunction bassdrum() {\n  return newImage('bassdrum', 3, 4);\n}\nfunction cymbals() {\n  return newImage('cymbals', 2, 2);\n}\nfunction glockenspiel() {\n  return newImage('glockenspiel', 3, 2);\n}\nfunction harp() {\n  return newImage('harp', 3, 6);\n}\nfunction oboe() {\n  return newImage('oboe', 1, 3);\n}\nfunction snare() {\n  return newImage('snare', 2, 2);\n}\nfunction cabasa() {\n  return newImage('cabasa', 1, 2);\n}\nfunction viola() {\n  const image = newImage('viola', 1, 3);\n  image.classList.add('stretch-viola');\n  return image;\n}\nfunction tuba() {\n  return newImage('tuba', 2, 3);\n}\n\nfunction newImage(type, width, height) {\n  const image = new Image();\n  image.src = `./images/${type}.png`;\n  image.spanX = width;\n  image.spanY = height;\n  image.area = width * height;\n  image.type = type;\n  setImageSize(image);\n  const boundResetImageSize = resetImageSize.bind(null, image);\n  window.addEventListener('resize', boundResetImageSize);\n  windowEvents.push(boundResetImageSize);\n  image.removeResizeListener = () => window.removeEventListener('resize', boundResetImageSize);\n  return image;\n}\n\nfunction setImageSize(image) {\n  const cell = document.querySelector('.board:not(.hidden) > .cell');\n  const squareWidth = cell.offsetWidth;\n  image.style.width = `${squareWidth * image.spanX}px`;\n  image.style.height = `${squareWidth * image.spanY}px`;\n}\n\nfunction resetImageSize(image) {\n  setImageSize(image);\n  resetRotationAdjustment(image);\n}\n\nfunction removeWindowEvents() {\n  windowEvents.forEach((event) => {\n    window.removeEventListener('resize', event);\n  });\n  windowEvents = [];\n}\n\nexport {\n  clarinet,\n  flute,\n  trombone,\n  violin,\n  bassoon,\n  cello,\n  horn,\n  trumpet,\n  piccolo,\n  bass,\n  bassdrum,\n  cymbals,\n  glockenspiel,\n  cabasa,\n  harp,\n  oboe,\n  snare,\n  viola,\n  tuba,\n  removeWindowEvents,\n};\n","const modeSelect = document.querySelector('#mode');\nlet mode = 'standard';\n\nfunction setMode() {\n  mode = modeSelect.value;\n}\n\nfunction getMode() {\n  return mode;\n}\n\nexport {\n  setMode,\n  getMode\n}","export function moveTrackerFactory(id) {\n  const tracker = document.getElementById(id);\n  tracker.moves = [];\n\n  let current = 0;\n\n  function hide() {\n    tracker.classList.add('invisible');\n  }\n\n  function show() {\n    tracker.classList.remove('invisible');\n    tracker.moves.forEach((move) => {\n      move.classList.remove('moved');\n    });\n    current = 0;\n  }\n\n  function reset(n) {\n    current = 0;\n    tracker.innerHTML = '';\n    tracker.moves = [];\n    for (let i = 0; i < n; i++) {\n      const move = document.createElement('span');\n      move.classList.add('move');\n      tracker.moves[i] = move;\n      tracker.appendChild(move);\n    }\n  }\n\n  function increment() {\n    tracker.moves[current].classList.add('moved');\n    current++;\n  }\n\n  return {\n    hide,\n    show,\n    reset,\n    increment,\n  };\n}\n","/* eslint-disable no-param-reassign */\nimport { getEnsemble, getEnsembleName } from './ensemble';\n\nconst musicToggle = document.querySelector('input[name=\"music-toggle\"]');\nconst ENSEMBLES_WITH_PERCUSSION = ['brass', 'strings', 'chamber'];\nconst boardSetupContainer = document.querySelector('.board-setup-container');\n\nlet path;\nlet instruments;\nconst musicBuffers = {};\nlet musicSources = {};\nconst removedInstruments = new Set();\n\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst musicGain = audioContext.createGain();\nmusicGain.gain.value = 1;\nmusicGain.connect(audioContext.destination);\n\nmusicToggle.addEventListener('change', async () => {\n  // only start/stop music if in gameplay mode\n  if (!boardSetupContainer.classList.contains('hidden')) return;\n\n  if (musicToggle.checked) {\n    await startMusic();\n  } else {\n    stopMusic();\n  }\n});\n\nconst musicSlider = document.getElementById('music-volume');\nmusicSlider.addEventListener('input', (e) => {\n  musicGain.gain.value = parseFloat(e.target.value);\n});\n\nfunction setPath() {\n  path = `./audio/music/${getEnsembleName()}`;\n}\n\nfunction setInstruments() {\n  instruments = Object.keys(getEnsemble());\n\n  if (ENSEMBLES_WITH_PERCUSSION.includes(getEnsembleName())) {\n    instruments.push('percussion');\n  }\n}\n\nasync function loadMusicBuffer(url) {\n  if (musicBuffers[url]) return musicBuffers[url];\n  const response = await fetch(url);\n  const arrayBuffer = await response.arrayBuffer();\n  const buffer = await audioContext.decodeAudioData(arrayBuffer);\n  musicBuffers[url] = buffer;\n  return buffer;\n}\n\nasync function startMusic() {\n  if (!musicToggle.checked) return;\n\n  setPath();\n  setInstruments();\n  stopMusic();\n\n  // Load all buffers in parallel\n  const urls = instruments.map((key) => `${path}/${key}.mp3`);\n  await Promise.all(urls.map(loadMusicBuffer));\n\n  // Start all at the same time, except removed instruments\n  const now = audioContext.currentTime;\n  instruments.forEach((key) => {\n    if (removedInstruments.has(key)) return;\n\n    const url = `${path}/${key}.mp3`;\n    const source = audioContext.createBufferSource();\n    source.buffer = musicBuffers[url];\n    source.loop = true;\n    const gain = audioContext.createGain();\n    gain.gain.value = 1;\n    source.connect(gain).connect(musicGain);\n    source.start(now);\n    musicSources[key] = { source, gain };\n  });\n}\n\nfunction removeInstrument(data) {\n  if (data.id !== 'board1') return;\n\n  const key = data.inst;\n  removedInstruments.add(key);\n  const entry = musicSources[key];\n  if (entry) {\n    const fadeTime = 0.4;\n    const stopAt = audioContext.currentTime + fadeTime;\n    entry.gain.gain.linearRampToValueAtTime(0.0001, stopAt);\n    entry.source.stop(stopAt);\n    entry.source.onended = () => {\n      entry.gain.disconnect();\n      delete musicSources[key];\n    };\n  }\n}\n\nfunction stopMusic() {\n  Object.values(musicSources).forEach(({ source, gain }) => {\n    const fadeTime = .5;\n    const stopAt = audioContext.currentTime + fadeTime;\n    gain.gain.linearRampToValueAtTime(0.0001, stopAt);\n    source.stop(stopAt);\n    source.onended = () => {\n      gain.disconnect();\n    };\n  });\n  musicSources = {};\n}\n\nfunction resetRemovedInstruments() {\n  removedInstruments.clear();\n}\n\nexport { startMusic, stopMusic, removeInstrument, resetRemovedInstruments };\n","let events = {};\n\nfunction on(eventName, fn) {\n  events[eventName] ||= [];\n  events[eventName].push(fn);\n}\n\nfunction off(eventName, fn) {\n  if (!events[eventName]) return;\n\n  for (let i = 0; i < events[eventName].length; i++) {\n    if (events[eventName][i] === fn) {\n      events[eventName].splice(i, 1);\n      break;\n    }\n  }\n}\n\nfunction emit(eventName, data) {\n  if (!events[eventName]) return;\n\n  events[eventName].forEach((fn) => fn(data));\n}\n\nfunction removeAllEvents() {\n  events = {};\n}\n\nexport { on, off, emit, removeAllEvents };\n","import { rowLength } from './boardSize';\nimport { getEnsemble, getEnsembleName } from './ensemble';\nimport { huntDistribution, targetDistribution, selectMove } from './engine';\nimport { containsNoEdge, containsMinorityEdges, getMaxAdjacentSquares } from './shipPlacement';\nimport { find2DSets } from './2DSetFinder';\n\nfunction playerFactory(homeBoard, opponentBoard, homeDOMBoard) {\n  const ships = getEnsemble();\n  const size = rowLength();\n  const ens = getEnsembleName();\n\n  function sunkAllShips() {\n    return opponentBoard.allShipsSunk();\n  }\n\n  function autoSetupSimple() {\n    homeBoard.resetSetup();\n    Object.entries(ships).forEach((ship) => {\n      const name = ship[0];\n      const dimensions = ship[1];\n      const set = homeBoard.findSets(homeBoard.isOccupied, ...dimensions);\n      const coords = set[Math.floor(Math.random() * set.length)];\n      homeBoard.placeShip(coords, name);\n    });\n    homeDOMBoard.placeSetImages(homeBoard);\n  }\n\n  function autoSetup() {\n    if (\n      ens === 'harp' ||\n      (size === 7 && (ens === 'orchestra' || ens === 'strings' || ens === 'percussion'))\n    ) {\n      autoSetupSimple();\n      return;\n    }\n\n    try {\n      homeBoard.resetSetup();\n      const max = getMaxAdjacentSquares(rowLength());\n      homeBoard.setMaxSharedEdges(max);\n      let conditionFunction;\n\n      Object.entries(ships).forEach((ship) => {\n        const name = ship[0];\n        const [width, height] = ship[1];\n        const random = Math.random();\n        if (random <= 0.1 || (max < 2 && ens === 'chamber' && size === 7)) {\n          conditionFunction = composeFunction(\n            homeBoard.isOccupied,\n            containsNoEdge,\n            homeBoard.willExceedMaxSharedEdges\n          );\n        } else if (random <= 0.15) {\n          conditionFunction = composeFunction(\n            homeBoard.isOccupied,\n            containsMinorityEdges,\n            homeBoard.willExceedMaxSharedEdges\n          );\n        } else {\n          conditionFunction = composeFunction(homeBoard.isOccupied, homeBoard.willExceedMaxSharedEdges);\n        }\n\n        const set = find2DSets(homeBoard, width, height, conditionFunction);\n        const coords = set[Math.floor(Math.random() * set.length)];\n        homeBoard.placeShip(coords, name);\n      });\n      homeDOMBoard.placeSetImages(homeBoard);\n    } catch {\n      autoSetup();\n    }\n  }\n\n  function composeFunction(...functions) {\n    return function conditionFunctions(coordsSet) {\n      for (let i = 0; i < functions.length; i++) {\n        if (functions[i](coordsSet)) return true;\n      }\n      return false;\n    };\n  }\n\n  return { sunkAllShips, autoSetup, autoSetupSimple };\n}\n\nfunction humanPlayerFactory(homeBoard, opponentBoard, homeDOMBoard, opponentDOMBoard, moveCounter) {\n  const prototype = playerFactory(homeBoard, opponentBoard, homeDOMBoard);\n\n  function isComputer() {\n    return false;\n  }\n\n  function setup() {\n    homeDOMBoard.setupBoard();\n    homeBoard.listenForPosition();\n  }\n\n  function setTurn() {\n    opponentDOMBoard.setDefense();\n    opponentDOMBoard.enable();\n    homeDOMBoard.setOffense();\n  }\n\n  function incrementMoveCounter() {\n    moveCounter.increment();\n  }\n\n  return { ...prototype, isComputer, setup, setTurn, incrementMoveCounter };\n}\n\nfunction computerPlayerFactory(homeBoard, opponentBoard, homeDOMBoard, moveCounter) {\n  const { sunkAllShips, autoSetup } = playerFactory(homeBoard, opponentBoard, homeDOMBoard);\n\n  function isComputer() {\n    return true;\n  }\n\n  function setup() {\n    autoSetup();\n  }\n\n  function setTurn() {\n    homeDOMBoard.disable();\n  }\n\n  function attack() {\n    const unweighted = Math.random() < .66;\n    const distribution = opponentBoard.hasUnresolvedHits()\n      ? targetDistribution(opponentBoard)\n      : huntDistribution(opponentBoard, unweighted);\n\n    const move = selectMove(distribution);\n    opponentBoard.receiveAttack({ id: opponentBoard.id, coords: move });\n    moveCounter.increment();\n  }\n\n  return { sunkAllShips, isComputer, setup, setTurn, attack };\n}\n\nexport { humanPlayerFactory, computerPlayerFactory };\n","/* eslint-disable no-param-reassign */\nconst rotateButton = document.querySelector('.rotate');\nrotateButton.addEventListener('click', rotate);\n\nlet currentStagedImage;\n\nfunction rotate() {\n  if (!currentStagedImage) return;\n  const rotation = Number(currentStagedImage.style.transform.match(/\\d+(?=deg)/)) % 360;\n  currentStagedImage.style.transform = `rotate(${rotation + 90}deg)`;\n}\n\nfunction setStagedImage(current) {\n  currentStagedImage = current;\n}\n\nfunction adjustForRotation(draggedImage, newImage) {\n  const rotation = Number(draggedImage.style.transform.match(/\\d+(?=deg)/)) % 360;\n  if (!rotation) return;\n  switch (rotation) {\n    case 90:\n      newImage.style.transform = `translateX(${newImage.style.height}) rotate(${rotation}deg)`;\n      break;\n    case 180:\n      newImage.style.transform = `translateY(100%) translateX(100%) rotate(${rotation}deg)`;\n      break;\n    default: // 270\n      newImage.style.transform = `translateY(${newImage.style.width}) rotate(${rotation}deg)`;\n  }\n  if (rotation !== 180) {\n    [draggedImage.spanY, draggedImage.spanX] = [draggedImage.spanX, draggedImage.spanY];\n  }\n}\n\nfunction resetRotationAdjustment(image) {\n  const rotation = Number(image.style.transform.match(/\\d+(?=deg)/));\n  const { height, width } = image.style;\n  if (rotation === 90) {\n    image.style.transform = image.style.transform.replace(/\\d+px/, height); // replace translateX value\n  } else if (rotation === 270) {\n    image.style.transform = image.style.transform.replace(/\\d+px/, width); // replace translateY value\n  }\n}\n\nexport { rotate, setStagedImage, adjustForRotation, resetRotationAdjustment };\n","export default function shipFactory(area, name, coordinateSet) {\n  let hits = 0;\n  const coords = coordinateSet;\n  const hit = () => {\n    if (hits < area) {\n      hits++;\n    } else {\n      throw new Error('You already sank this ship!');\n    }\n  };\n  const isSunk = () => hits === area;\n  return { hit, isSunk, name, coords, area };\n}\n","import { getEnsembleName } from \"./ensemble\";\nimport { rowLength } from \"./boardSize\";\n\nconst boardSizes = {\n  '7': 'small',\n  '10': 'standard',\n  '13': 'large'\n}\n\nconst probabilities = {\n  'chamber': {\n    // 35% chance no shared edges allowed, 65% chance 1 shared edge allowed, etc.\n    'small': [.35, .3, .2, .1, .05],\n    'standard': [.9, .1],\n    'large': [.95, .05]\n  },\n  'orchestra': {\n    'small': [-Infinity],\n    'standard': [.75, .1, .1, .05],\n    'large': [.95, .05]\n  },\n  'strings': {\n    'small': [-Infinity],\n    'standard': [.9, .1],\n    'large': [.95, .05]\n  },\n  'woodwinds': {\n    'small': [.7, .2, .1],\n    'standard': [.9, .1],\n    'large': [.95, .05]\n  },\n  'brass': {\n    'small': [.8, .2],\n    'standard': [.9, .1],\n    'large': [.95, .05]\n  },\n  'percussion': {\n    'small': [-Infinity],\n    'standard': [.9, .1],\n    'large': [.95, .05]\n  },\n  'harp': {\n    'small': [-Infinity],\n    'standard': [-Infinity],\n    'large': [-Infinity],\n  }\n}\n\nfunction getMaxAdjacentSquares(size) {\n  const arr = probabilities[getEnsembleName()][boardSizes[size]];\n\n  const random = Math.random();\n  let maxAdjacent;\n  let cumulativeProbability = 0;\n  for (let i = 0; i < arr.length; i++) {\n    cumulativeProbability += arr[i];\n    if (random <= cumulativeProbability) {\n      maxAdjacent = i;\n      break;\n    }\n  }\n  return maxAdjacent === undefined ? Infinity : maxAdjacent;\n}\n\nconst containsNoEdge = (coordsSet) => {\n  for (let i = 0; i < coordsSet.length; i++) {\n    const coords = coordsSet[i];\n    if (\n      coords[0] === 0 ||\n      coords[0] === rowLength() - 1 ||\n      coords[1] === 0 ||\n      coords[1] === rowLength() - 1\n    ) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst containsMinorityEdges = (coordsSet) => {\n  let numEdges = 0;\n  for (let i = 0; i < coordsSet.length; i++) {\n    const coords = coordsSet[i];\n    if (\n      coords[0] === 0 ||\n      coords[0] === rowLength() - 1 ||\n      coords[1] === 0 ||\n      coords[1] === rowLength() - 1\n    ) {\n      numEdges++;\n    }\n  }\n  return numEdges < coordsSet.length / 2;\n};\n\nconst getAdjacentSquares = (origin) => {\n  const set = [\n    [origin[0] + 1, origin[1]],\n    [origin[0] - 1, origin[1]],\n    [origin[0], origin[1] + 1],\n    [origin[0], origin[1] - 1],\n  ];\n  return set.filter(\n    (adjacent) =>\n      adjacent[0] >= 0 && adjacent[0] < rowLength() && adjacent[1] >= 0 && adjacent[1] < rowLength()\n  );\n};\n\nexport { getMaxAdjacentSquares, containsNoEdge, containsMinorityEdges, getAdjacentSquares }","const statsPanel = document.querySelector('.stats-panel');\nconst statsButton = document.querySelector('.inst-stats');\nconst statsButtonIcon = statsButton.querySelector('span')\n\nfunction bass() {\n  const instTitle = 'Bass';\n  const instLink = 'https://www.youtube.com/watch?v=nUUVSxZ4ohI';\n\n  const statsData = [\n    { label: 'Dexterity', value: 77 },\n    { label: 'Intellect', value: 84 },\n    { label: 'Charisma', value: 88 },\n    { label: 'Strength', value: 90 },\n    { label: 'Balance', value: 94 },\n  ];\n\n  const notesData = [\n    'Tuned in fourths, unlike the other members of the string section, which are tuned in fifths',\n    'Known as the contrabass, string bass, or double bass',\n    'The term \"double bass\" comes from its original role of doubling the cello part an octave lower',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction cello() {\n  const instTitle = 'Cello';\n  const instLink = 'https://www.youtube.com/watch?v=RcqzPoMza7c';\n\n  const statsData = [\n    { label: 'Dexterity', value: 90 },\n    { label: 'Intellect', value: 93 },\n    { label: 'Charisma', value: 96 },\n    { label: 'Stamina', value: 95 },\n    { label: 'Balance', value: 94 },\n  ];\n\n  const notesData = [\n    'Range closely mirrors that of the human voice, spanning bass to soprano',\n    'Full name is violoncello, which translates to “little violone\"',\n    \"Most people's favorite instrument\",\n    'The oldest surviving cello was crafted by Andrea Amati between 1538 and 1560'\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction viola() {\n  const instTitle = 'Viola';\n  const instLink = 'https://www.youtube.com/watch?v=XierDLeUiYg';\n\n  const statsData = [\n    { label: 'Dexterity', value: 87 },\n    { label: 'Intellect', value: 94 },\n    { label: 'Charisma', value: 92 },\n    { label: 'Stamina', value: 90 },\n    { label: 'Balance', value: 89 },\n  ];\n\n  const notesData = [\n    'Often confused with the violin, but is a bit bigger and possesses a deeper, mellower sound',\n    'Reads alto clef, unique among string instruments',\n    'Unlike the standardized size of violins, violas lack a uniform full size. They typically range from 15 to 18 inches in body length',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction violin() {\n  const instTitle = 'Violin';\n  const instLink = 'https://www.youtube.com/watch?v=zgaQFLUdUL0';\n\n  const statsData = [\n    { label: 'Dexterity', value: 97 },\n    { label: 'Intellect', value: 87 },\n    { label: 'Charisma', value: 84 },\n    { label: 'Stamina', value: 91 },\n    { label: 'Strength', value: 93 },\n  ];\n\n  const notesData = [\n    'The modern violin emerged in early 16th-century northern Italy.',\n    'Plays the most notes of any instrument in the orchestra',\n    'The most expensive violin is a 1715 Stradivarius, sold for $23 million in 2025',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction bassoon() {\n  const instTitle = 'Bassoon';\n  const instLink = 'https://www.youtube.com/watch?v=-kmy-hm3ai4';\n\n  const statsData = [\n    { label: 'Dexterity', value: 86 },\n    { label: 'Guile', value: 81 },\n    { label: 'Charisma', value: 94 },\n    { label: 'Stamina', value: 84 },\n    { label: 'Strength', value: 87 },\n  ];\n\n  const notesData = [\n    'Evolved from the dulcian in the 16th and 17th centuries',\n    'Features a conical bore that doubles back on itself, contributing to its rich, warm tone and extensive range',\n    'Traditionally made from maple wood',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction clarinet() {\n  const instTitle = 'Clarinet';\n  const instLink = 'https://www.youtube.com/watch?v=nENXs6n_ITI';\n  const statsData = [\n    { label: 'Dexterity', value: 93 },\n    { label: 'Intellect', value: 85 },\n    { label: 'Charisma', value: 91 },\n    { label: 'Luck', value: 92 },\n    { label: 'Balance', value: 88 },\n  ];\n\n  const notesData = [\n    'The modern clarinet was developed around 1700 in Nuremberg, Germany',\n    'Prominent in jazz, klezmer, and various folk traditions',\n    'The clarinet family ranges from the high-pitched E♭ clarinet to the low, deep contrabass clarinet',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction oboe() {\n  const instTitle = 'Oboe';\n  const instLink = 'https://www.youtube.com/watch?v=QNBsgfh4UMY';\n\n  const statsData = [\n    { label: 'Dexterity', value: 87 },\n    { label: 'Intellect', value: 88 },\n    { label: 'Charisma', value: 86 },\n    { label: 'Willpower', value: 94 },\n    { label: 'Quirkiness', value: 95 },\n  ];\n\n  const notesData = [\n    'A professional oboist will spend approxiimately 30% of their life making reeds',\n    'Orchestras tune to an A played by the principal oboist',\n    'The term \"oboe\" is derived from the French word \"hautbois,\" meaning \"high wood,\" reflecting its pitch and wooden construction',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction flute() {\n  const instTitle = 'Flute';\n  const instLink = 'https://www.youtube.com/watch?v=MTqOckjkkeE';\n\n  const statsData = [\n    { label: 'Dexterity', value: 97 },\n    { label: 'Intellect', value: 90 },\n    { label: 'Stealth', value: 92 },\n    { label: 'Strength', value: 85 },\n    { label: 'Balance', value: 88 },\n  ];\n\n  const notesData = [\n    'Archaeological discoveries indicate flutes made from bird bones and mammoth ivory dating back over 30,000 years',\n    'Throughout history, flutes have also been crafted from materials such as wood, bamboo, jade, glass, silver, and gold',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction piccolo() {\n  const instTitle = 'Piccolo';\n  const instLink = 'https://www.youtube.com/watch?v=ivQpiJos1Sw';\n\n  const statsData = [\n    { label: 'Dexterity', value: 94 },\n    { label: 'Intellect', value: 86 },\n    { label: 'Stealth', value: 100 },\n    { label: 'Strength', value: 84 },\n    { label: 'Charisma', value: 90 },\n  ];\n\n  const notesData = [\n    'Highest-pitched instrument of the orchestra',\n    'Evolved from military transverse flutes used during the Middle Ages',\n    'Due to its piercing sound, the piccolo is a staple in military and marching bands',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction tuba() {\n  const instTitle = 'Tuba';\n  const instLink = 'https://www.youtube.com/watch?v=PzH4XAv9ZCQ';\n\n  const statsData = [\n    { label: 'Dexterity', value: 72 },\n    { label: 'Strength', value: 88 },\n    { label: 'Charisma', value: 92 },\n    { label: 'Balance', value: 95 },\n    { label: 'Luck', value: 88 },\n  ];\n\n  const notesData = [\n    'First appeared in the mid-19th century',\n    'Largest and lowest-pitched instrument in the brass family',\n    'Used in orchestras, marching bands, drum and bugle corps, and jazz bands ',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction trombone() {\n  const instTitle = 'Trombone';\n  const instLink = 'https://www.youtube.com/watch?v=9MNS9LKcDII';\n  const statsData = [\n    { label: 'Dexterity', value: 80 },\n    { label: 'Strength', value: 92 },\n    { label: 'Charisma', value: 86 },\n    { label: 'Balance', value: 89 },\n    { label: 'Slidy-ness', value: 100 },\n  ];\n  const notesData = [\n    'Employs a telescoping slide to change pitch, allowing for smooth glissandos',\n    'Used in a wide range of musical genres, including classical, jazz, funk, ska, and salsa',\n    'Orchestras also feature the bigger and lower-pitched bass trombone'\n  ];\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction trumpet() {\n  const instTitle = 'Trumpet';\n  const instLink = 'https://www.youtube.com/watch?v=QcIp7K2UFgE';\n\n  const statsData = [\n    { label: 'Volume', value: 97 },\n    { label: 'Strength', value: 94 },\n    { label: 'Charisma', value: 88 },\n    { label: 'Stamina', value: 79 },\n    { label: 'Luck', value: 85 },\n  ];\n\n  const notesData = [\n    'Dates back to at least 1500 BC — notably, a pair of trumpets was found in the tomb of Egyptian Pharaoh Tutankhamun.',\n    'Modern trumpets are typically made of brass and may be finished with lacquer or silver plating',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction horn() {\n  const instTitle = 'French Horn';\n  const instLink = 'https://www.youtube.com/watch?v=cK0UFgnrIqY';\n\n  const statsData = [\n    { label: 'Dexterity', value: 85 },\n    { label: 'Strength', value: 89 },\n    { label: 'Intellect', value: 90 },\n    { label: 'Charisma', value: 95 },\n    { label: 'Stamina', value: 77 },\n  ];\n\n  const notesData = [\n    \"The horn's ancestors were used in hunting to signal and communicate\",\n    'If you were to uncoil a standard horn, it would reach halfway to the moon!',\n    'Why is it called the French Horn? Nobody knows!',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction bassdrum() {\n  const instTitle = 'Bass Drum';\n  const instLink = 'https://youtu.be/-lJctvybAJ8?si=PeagTj475s9LsQU4&t=354';\n  const statsData = [\n    { label: 'Dexterity', value: 60 },\n    { label: 'Strength', value: 96 },\n    { label: 'Charisma', value: 77 },\n    { label: 'Willpower', value: 94 },\n    { label: 'Stealth', value: 25 },\n  ];\n  const notesData = [\n    'Its low, booming sound serves as a rhythmic anchor for the orchestra',\n    'Traces its roots to the Turkish davul, used as early as the 14th century',\n    'Became a central component of the modern drum kit in the early 1900s',\n  ];\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction cymbals() {\n  const instTitle = 'Cymbals';\n  const instLink = 'https://youtu.be/-lJctvybAJ8?si=G8lMEujNxs-7x1jf&t=649';\n\n  const statsData = [\n    { label: 'Volume', value: 97 },\n    { label: 'Strength', value: 95 },\n    { label: 'Charisma', value: 84 },\n    { label: 'Stamina', value: 90 },\n    { label: 'Intellect', value: 81 },\n  ];\n\n  const notesData = [\n    'The earliest evidence of cymbals dates back to 3000 BCE in ancient Mesopotamia and Egypt',\n    'Come in various types, including crash, ride, hi-hat, splash, and china',\n    'Most are made from bronze alloys, typically 80-90% copper and 10-20% tin',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction glockenspiel() {\n  const instTitle = 'Glockenspiel';\n  const instLink = 'https://youtu.be/-lJctvybAJ8?si=dTdxtj1MA-l9Qc3K&t=293';\n  const statsData = [\n    { label: 'Dexterity', value: 90 },\n    { label: 'Strength', value: 85 },\n    { label: 'Charisma', value: 94 },\n    { label: 'Intellect', value: 91 },\n    { label: 'Silly name', value: 100 },\n  ];\n\n  const notesData = [\n    'The term \"glockenspiel\" comes from German, meaning \"bell play,\"',\n    'While similar to the xylophone, the glockenspiel uses metal bars, producing a bright, bell-like sound, whereas the xylophone has wooden bars, yielding a warmer tone',\n  ];\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction cabasa() {\n  const instTitle = 'Cabasa';\n  const instLink = 'https://www.youtube.com/watch?v=weMXR0xtEXA';\n\n  const statsData = [\n    { label: 'Balance', value: 90 },\n    { label: 'Strength', value: 74 },\n    { label: 'Charisma', value: 94 },\n    { label: 'Intellect', value: 87 },\n    { label: 'Stamina', value: 91 },\n  ];\n\n  const notesData = [\n    'Invented in the 1960s by Martin Cohen, drawing inspiration from the traditional African shekere',\n    'Commonly used in Latin jazz and bossa nova',\n    'Consists of a cylindrical wooden or plastic body wrapped with loops of steel ball chains, creating a distinctive metallic, rattling sound',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction snare() {\n  const instTitle = 'Snare Drum';\n  const instLink = 'https://youtu.be/-lJctvybAJ8?si=0djRp8gH7EWfwSwf&t=537';\n\n  const statsData = [\n    { label: 'Dexterity', value: 94 },\n    { label: 'Strength', value: 92 },\n    { label: 'Charisma', value: 82 },\n    { label: 'Intellect', value: 88 },\n    { label: 'Stamina', value: 95 },\n  ];\n\n  const notesData = [\n    'Evolved from the medieval tabor, a drum used in the 14th century to signal troops in battle',\n    'Its sharp, staccato sound comes from metal or nylon wires — called snares — stretched across the bottom head',\n    'A core component of modern drum kits',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\nfunction harp() {\n  const instTitle = 'Harp';\n  const instLink = 'https://www.youtube.com/watch?v=P2Xdb1ljd3g';\n\n  const statsData = [\n    { label: 'Dexterity', value: 91 },\n    { label: 'Intellect', value: 89 },\n    { label: 'Charisma', value: 94 },\n    { label: 'Etherealness', value: 100 },\n    { label: 'Luck', value: 87 },\n  ];\n\n  const notesData = [\n    'Dates back to around 3000 BCE in ancient Mesopotamia, Egypt, and Persia',\n    'Modern concert harps typically have 47 strings, while smaller folk harps may have between 22 and 38 strings',\n    'National symbol of Ireland',\n  ];\n\n  populateStatsPanel(instTitle, instLink, statsData, notesData);\n}\n\nfunction populateStatsPanel(instTitle, instLink, statsData, notesData) {\n  clearStatsPanel();\n\n  // Create and populate the title section\n  const titleDiv = document.createElement('div');\n  titleDiv.classList.add('title');\n\n  const titleHeading = document.createElement('h3');\n  const titleLink = document.createElement('a');\n  titleLink.href = instLink;\n  titleLink.target = '_blank';\n  titleLink.textContent = instTitle;\n\n  titleHeading.appendChild(titleLink);\n  titleDiv.appendChild(titleHeading);\n  statsPanel.appendChild(titleDiv);\n\n  // Create and populate the stats panel\n  const stats = document.createElement('div');\n  stats.classList.add('stats', 'inst-details');\n\n  const statsHeading = document.createElement('h6');\n  statsHeading.textContent = 'Stats';\n  stats.appendChild(statsHeading);\n\n  const statsList = document.createElement('ul');\n\n  statsData.forEach((stat) => {\n    const listItem = document.createElement('li');\n\n    const statsLabel = document.createElement('div');\n    statsLabel.classList.add('stats-label');\n\n    const labelSpan = document.createElement('span');\n    labelSpan.textContent = `${stat.label}:`;\n    statsLabel.appendChild(labelSpan);\n\n    const valueSpan = document.createElement('span');\n    valueSpan.textContent = stat.value;\n    statsLabel.appendChild(valueSpan);\n\n    listItem.appendChild(statsLabel);\n\n    const statsBar = document.createElement('div');\n    statsBar.classList.add('stats-bar');\n\n    const statsBarInner = document.createElement('div');\n    statsBarInner.classList.add('stats-bar-inner');\n    statsBarInner.style.width = `${stat.value}%`;\n    statsBar.appendChild(statsBarInner);\n\n    listItem.appendChild(statsBar);\n    statsList.appendChild(listItem);\n  });\n\n  stats.appendChild(statsList);\n  statsPanel.appendChild(stats);\n\n  // Create and populate the notes panel\n  const notesPanel = document.createElement('div');\n  notesPanel.classList.add('notes', 'inst-details');\n\n  const notesHeading = document.createElement('h6');\n  notesHeading.textContent = 'Notes';\n  notesPanel.appendChild(notesHeading);\n\n  const notesList = document.createElement('ul');\n\n  notesData.forEach((note) => {\n    const listItem = document.createElement('li');\n    const noteMarker = document.createElement('span');\n    noteMarker.textContent = '▴';\n    listItem.appendChild(noteMarker);\n    const noteText = document.createTextNode(` ${note}`);\n    listItem.appendChild(noteText);\n    notesList.appendChild(listItem);\n  });\n\n  notesPanel.appendChild(notesList);\n  statsPanel.appendChild(notesPanel);\n}\n\nfunction clearStatsPanel() {\n  statsPanel.innerHTML = '';\n}\n\nfunction enableStatsButton() {\n  statsButton.disabled = false;\n}\n\nfunction resetStatsPanel() {\n  clearStatsPanel();\n  statsButton.disabled = true;\n  statsButtonIcon.textContent = 'info';\n  statsPanel.classList.remove('active');\n}\n\nstatsButton.addEventListener('click', () => {\n  if (statsButtonIcon.textContent === 'info') {\n    statsButtonIcon.textContent = 'cancel';\n    statsPanel.classList.add('active');\n  } else {\n    statsButtonIcon.textContent = 'info';\n    statsPanel.classList.remove('active');\n  }\n});\n\nexport {\n  bass,\n  cello,\n  viola,\n  violin,\n  bassoon,\n  clarinet,\n  oboe,\n  flute,\n  piccolo,\n  tuba,\n  trombone,\n  trumpet,\n  horn,\n  bassdrum,\n  cymbals,\n  glockenspiel,\n  cabasa,\n  snare,\n  harp,\n  resetStatsPanel,\n  enableStatsButton,\n};\n","export default function message(player, inst) {\n  return `${player}'s ${instName(inst)} ${verb(inst)} been sunk!`;\n}\n\nfunction instName(inst) {\n  switch (inst) {\n    case 'bass':\n      return 'double bass';\n    case 'bassdrum':\n      return 'bass drum';\n    case 'horn':\n      return 'french horn';\n    case 'snare':\n      return 'snare drum';\n    default:\n      return inst;\n  }\n}\n\nfunction verb(inst) {\n  return inst === 'cymbals' ? 'have' : 'has';\n}\n","/* eslint-disable no-param-reassign */\nimport { getEnsemble } from './ensemble';\nimport { find2DSets } from './2DSetFinder';\n\nexport default function unresolvedShipList() {\n  let list = [];\n\n  function resolve(board) {\n    for (let i = 0; i < list.length; i++) {\n      const { name } = list[i];\n      const [width, height] = [...getEnsemble()[name]];\n      const invalidPlacement = makeConditionFunction(board, name);\n      const set = find2DSets(board, width, height, invalidPlacement);\n      // find2DSets must be used because it can check that a set includes one square that meets a condition\n      // find1DSets looks at each square individually for conditions that would disqualify a set\n\n      if (set.length === 0) {\n        throw new Error(`No possible sets found for ${name}`);\n      } else if (set.length === 1) {\n        markSunkSquares(board, set[0]);\n        remove(name);\n        resolve(board);\n        break;\n      }\n    }\n  }\n\n  function markSunkSquares(board, set) {\n    set.forEach((coords) => {\n      board.squares[coords[0]][coords[1]].sunk = true;\n    });\n  }\n\n  function makeConditionFunction(board, name) {\n    return function conditionFunction(coordsSet) {\n      if (\n        !coordsSet.some((coords) => {\n          const square = board.squares[coords[0]][coords[1]];\n          return square.sunkInstrument === name;\n        })\n      ) {\n        return true;\n      }\n      if (\n        coordsSet.some((coords) => {\n          const square = board.squares[coords[0]][coords[1]];\n          return !square.attacked || (square.sunk && square.sunkInstrument !== name);\n        })\n      ) {\n        return true;\n      }\n\n      return false;\n    };\n  }\n\n  function add(ship) {\n    // list is ordered from largest to smallest because larger instruments\n    // are more likely to have only one possible placement\n    for (let i = 0; i < list.length; i++) {\n      if (ship.area > list[i].area) {\n        list.splice(i, 0, ship);\n        return;\n      }\n    }\n    list.push(ship);\n  }\n\n  function remove(name) {\n    for (let i = 0; i < list.length; i++) {\n      if (name === list[i].name) {\n        list.splice(i, 1);\n        return;\n      }\n    }\n    throw new Error('No instrument found to remove');\n  }\n\n  function clear() {\n    list = [];\n  }\n\n  return {\n    resolve,\n    add,\n    clear,\n  };\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './gameflow';\n"],"names":[],"sourceRoot":""}